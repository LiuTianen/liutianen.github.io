<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tianen</title>
  
  <subtitle>搞事情，搞事情</subtitle>
  <link href="https://www.lauyongyi.cn/atom.xml" rel="self"/>
  
  <link href="https://www.lauyongyi.cn/"/>
  <updated>2021-07-23T14:37:00.000Z</updated>
  <id>https://www.lauyongyi.cn/</id>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>常用的Git命令</title>
    <link href="https://www.lauyongyi.cn/%E5%B8%B8%E7%94%A8%E7%9A%84Git%E5%91%BD%E4%BB%A4.html"/>
    <id>https://www.lauyongyi.cn/%E5%B8%B8%E7%94%A8%E7%9A%84Git%E5%91%BD%E4%BB%A4.html</id>
    <published>2021-07-23T14:37:00.000Z</published>
    <updated>2021-07-23T14:37:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>​        Git是一个分布式版本控制软件，最初由林纳斯·托瓦兹创作，于2005年以GPL发布。最初目的是为更好地管理Linux内核开发而设计。应注意的是，这与GNU Interactive Tools（一个类似Norton Commander界面的文件管理器）不同。</p><p>git最初的开发动力来自于BitKeeper和Monotone。git最初只是作为一个可以被其他前端（比如Cogito或Stgit）包装的后端而开发的，但后来git内核已经成熟到可以独立地用作版本控制。很多著名的软件都使用git进行版本控制，其中包括Linux内核、X.Org服务器和OLPC内核等项目的开发流程。介绍摘抄自<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvR2l0">wikipedia<i class="fa fa-external-link-alt"></i></span>。</p><a id="more"></a><h4 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h4><h5 id="在Linux上安装Git"><a href="#在Linux上安装Git" class="headerlink" title="在Linux上安装Git"></a>在Linux上安装Git</h5><p>首先，你可以试着输入<code>git</code>，看看系统有没有安装Git：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git</span><br><span class="line">The program &#39;git&#39; is currently not installed. You can install it by typing:</span><br><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure><p>如果碰巧用Debian或Ubuntu Linux，通过一条<code>sudo apt-get install git</code>就可以直接完成Git的安装，非常简单。</p><p>老一点的Debian或Ubuntu Linux，要把命令改为<code>sudo apt-get install git-core</code>，因为以前有个软件也叫GIT（GNU Interactive Tools），结果Git就只能叫<code>git-core</code>了。由于Git名气实在太大，后来就把GNU Interactive Tools改成<code>gnuit</code>，<code>git-core</code>正式改为<code>git</code>。</p><p>如果是其他Linux版本，可以直接通过源码安装。先从Git官网下载源码，然后解压，依次输入：<code>./config</code>，<code>make</code>，<code>sudo make install</code>这几个命令安装就好了。</p><h4 id="在Windows上安装Git"><a href="#在Windows上安装Git" class="headerlink" title="在Windows上安装Git"></a>在Windows上安装Git</h4><p>在Windows上使用Git，可以从Git官网直接<span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9kb3dubG9hZHM=">下载安装程序<i class="fa fa-external-link-alt"></i></span>，然后按默认选项安装即可。</p><p>安装完成后，在开始菜单里找到“Git”-&gt;“Git Bash”，蹦出一个类似命令行窗口的东西，就说明Git安装成功！</p><h4 id="在Mac-OS-X上安装Git"><a href="#在Mac-OS-X上安装Git" class="headerlink" title="在Mac OS X上安装Git"></a>在Mac OS X上安装Git</h4><p>如果你正在使用Mac做开发，有两种安装Git的方法。</p><p>一是安装homebrew，然后通过homebrew安装Git，具体方法请参考homebrew的文档：<span class="exturl" data-url="aHR0cDovL2JyZXcuc2gvJUUzJTgwJTgy">http://brew.sh/。<i class="fa fa-external-link-alt"></i></span></p><p>第二种方法更简单，也是推荐的方法，就是直接从AppStore安装Xcode，Xcode集成了Git，不过默认没有安装，你需要运行Xcode，选择菜单“Xcode”-&gt;“Preferences”，在弹出窗口中找到“Downloads”，选择“Command Line Tools”，点“Install”就可以完成安装了。</p><p>安装完成后，还需要最后一步设置，在命令行输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git config --global user.name <span class="string">&quot;Your Name&quot;</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config --global user.email <span class="string">&quot;email@example.com&quot;</span></span></span><br></pre></td></tr></table></figure><p>因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。你也许会担心，如果有人故意冒充别人怎么办？这个不必担心，首先我们相信大家都是善良无知的群众，其次，真的有冒充的也是有办法可查的。</p><p>注意<code>git config</code>命令的<code>--global</code>参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。</p><h4 id="常用的Git命令"><a href="#常用的Git命令" class="headerlink" title="常用的Git命令"></a>常用的Git命令</h4><h5 id="创建本地仓库"><a href="#创建本地仓库" class="headerlink" title="创建本地仓库"></a>创建本地仓库</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Documents % mkdir GitEx  #创建一个目录</span><br><span class="line">Documents % cd GitEx  #进入到目录</span><br><span class="line">GitEx % git init  #把这个目录变成Git可以管理的仓库</span><br></pre></td></tr></table></figure><p>执行之后，瞬间Git就把仓库建好了，而且告诉你是一个空的仓库（empty Git repository），可以发现当前目录下多了一个<code>.git</code>的目录，这个目录是Git来跟踪管理版本库的，没事千万不要手动修改这个目录里面的文件，不然改乱了，就把Git仓库给破坏了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">hint: Using &#x27;master&#x27; as the name for the initial branch. This default branch name</span><br><span class="line">hint: is subject to change. To configure the initial branch name to use in all</span><br><span class="line">hint: of your new repositories, which will suppress this warning, call:</span><br><span class="line">hint: </span><br><span class="line">hint: git config --global init.defaultBranch &lt;name&gt;</span><br><span class="line">hint: </span><br><span class="line">hint: Names commonly chosen instead of &#x27;master&#x27; are &#x27;main&#x27;, &#x27;trunk&#x27; and</span><br><span class="line">hint: &#x27;development&#x27;. The just-created branch can be renamed via this command:</span><br><span class="line">hint: </span><br><span class="line">hint: git branch -m &lt;name&gt;</span><br><span class="line">Initialized empty Git repository in /Users/tinenlau/Documents/GitEx/.git/</span><br></pre></td></tr></table></figure><p>通过<code>ls -a</code>可以看到目录结构。如果没有看到<code>.git</code>目录，那是因为这个目录默认是隐藏的，用<code>ls -ah</code>命令就可以看见。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GitEx % ls -a</span><br><span class="line">....git</span><br></pre></td></tr></table></figure><h5 id="添加文件"><a href="#添加文件" class="headerlink" title="添加文件"></a>添加文件</h5><p>把一个文件放入到 “GitEx” 目录下，一定要放到 “GitEx” 目录下（子目录也行），因为这是一个Git仓库，放到其他地方Git再厉害也找不到这个文件。</p><p>第一步：用命令<code>git add</code>告诉Git，把文件添加到仓库，例如一张图片：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GitEx % git add wallhaven-57ge21.jpeg</span><br></pre></td></tr></table></figure><p>执行上面的命令，没有任何显示，这就对了，Unix的哲学是“没有消息就是好消息”，说明添加成功。</p><p>第二步：用命令<code>git commit</code>告诉Git，把文件提交到仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GitEx % git commit -m &quot;add new pic&quot;</span><br><span class="line">[master (root-commit) 1983ca0] add new pic</span><br><span class="line"> 1 file changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line"> create mode 100644 wallhaven-57ge21.jpeg</span><br></pre></td></tr></table></figure><p>简单解释一下<code>git commit</code>命令，<code>-m</code>后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。</p><p>嫌麻烦不想输入<code>-m &quot;xxx&quot;</code>行不行？确实有办法可以这么干，但是强烈不建议你这么干，因为输入说明对自己对别人阅读都很重要。实在不想输入说明的童鞋请自行Google，我不告诉你这个参数。</p><p><code>git commit</code>命令执行成功后会告诉你，<code>1 file changed</code>：1个文件被改动（我们新添加的wallhaven-57ge21.jpeg文件）；<code>0 insertions</code>：没有插入内容（因为上传的是图片）。</p><p>为什么Git添加文件需要<code>add</code>，<code>commit</code>一共两步呢？因为<code>commit</code>可以一次提交很多文件，所以你可以多次<code>add</code>不同的文件，比如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GitEx % git add file1.txt</span><br><span class="line">GitEx % git add file2.txt file3.txt</span><br><span class="line">GitEx % git commit -m &quot;add 3 files.&quot;</span><br></pre></td></tr></table></figure><h5 id="远程仓库操作"><a href="#远程仓库操作" class="headerlink" title="远程仓库操作"></a>远程仓库操作</h5><p>仓库克隆：git clone 仓库地址</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;​        Git是一个分布式版本控制软件，最初由林纳斯·托瓦兹创作，于2005年以GPL发布。最初目的是为更好地管理Linux内核开发而设计。应注意的是，这与GNU Interactive Tools（一个类似Norton Commander界面的文件管理器）不同。&lt;/p&gt;
&lt;p&gt;git最初的开发动力来自于BitKeeper和Monotone。git最初只是作为一个可以被其他前端（比如Cogito或Stgit）包装的后端而开发的，但后来git内核已经成熟到可以独立地用作版本控制。很多著名的软件都使用git进行版本控制，其中包括Linux内核、X.Org服务器和OLPC内核等项目的开发流程。介绍摘抄自&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvR2l0&quot;&gt;wikipedia&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="工具使用" scheme="https://www.lauyongyi.cn/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
    
    <category term="工具使用" scheme="https://www.lauyongyi.cn/tags/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>adb 命令播放音视频</title>
    <link href="https://www.lauyongyi.cn/adb%E6%92%AD%E6%94%BE%E9%9F%B3%E8%A7%86%E9%A2%91.html"/>
    <id>https://www.lauyongyi.cn/adb%E6%92%AD%E6%94%BE%E9%9F%B3%E8%A7%86%E9%A2%91.html</id>
    <published>2021-06-26T14:50:00.000Z</published>
    <updated>2021-06-26T15:01:52.047Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>android系统测试过程中需要自动播放视频与音乐，可以使用ADB命令进行操作，方法如下</p><a id="more"></a><h5 id="播放音乐"><a href="#播放音乐" class="headerlink" title="播放音乐"></a>播放音乐</h5><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell am start -n com.android.music/com.android.music.MediaPlaybackActivity -d /sdcard/test.mp3</span><br></pre></td></tr></table></figure><p>/sdcard/timian.mp3为音乐地址</p><p>或</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell am start -a &quot;android.intent.action.VIEW&quot; -t &quot;audio/mp3&quot; -d &quot;file:///storage/sdcard0/Music/hello.mp3&quot;</span><br></pre></td></tr></table></figure><p>/storage/sdcard0/Music/hello.mp3为音乐地址</p><h5 id="播放视频"><a href="#播放视频" class="headerlink" title="播放视频"></a>播放视频</h5><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell am start -a android.intent.action.VIEW -d   &quot;file:///mnt/sdcard/DCIM/Camera/test.3gp&quot; -t &quot;video/*&quot; </span><br></pre></td></tr></table></figure><p>/mnt/sdcard/DCIM/Camera/test.3gp为视频文件地址</p><p>或</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell am start -a android.intent.action.VIEW -d &quot;file:///mnt/sdcard/DCIM/Camera/test.3gp&quot; -t &quot;video/*&quot; -n &quot;com.alensw.PicFolder/.PlayerActivity&quot; </span><br></pre></td></tr></table></figure><p><code>/mnt/sdcard/DCIM/Camera/test.3gp</code>为视频文件地址</p><p><code>com.alensw.PicFolder/.PlayerActivity</code>是播放器的播放页面</p><h5 id="模拟操作"><a href="#模拟操作" class="headerlink" title="模拟操作"></a>模拟操作</h5><p>对屏幕进行操作，可以用ADB命令模拟按键</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">adb shell input keyevent 24 #增加音量</span><br><span class="line">adb shell input keyevent 25 #降低音量</span><br><span class="line">adb shell input keyevent 85 #暂停/播放</span><br><span class="line">adb shell input keyevent 126 #恢复播放</span><br><span class="line">adb shell input keyevent 127 #停止播放</span><br></pre></td></tr></table></figure><p>关闭可以采用杀死进程的方式进行</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ps -A | grep music</span><br><span class="line">#找到music的pid</span><br><span class="line">kill pid</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;android系统测试过程中需要自动播放视频与音乐，可以使用ADB命令进行操作，方法如下&lt;/p&gt;</summary>
    
    
    
    <category term="Android" scheme="https://www.lauyongyi.cn/categories/Android/"/>
    
    
    <category term="adb命令" scheme="https://www.lauyongyi.cn/tags/adb%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Mac OS 运行npm报错</title>
    <link href="https://www.lauyongyi.cn/Mac%20OS%20npm%E6%8A%A5%E9%94%99.html"/>
    <id>https://www.lauyongyi.cn/Mac%20OS%20npm%E6%8A%A5%E9%94%99.html</id>
    <published>2021-06-22T15:17:00.000Z</published>
    <updated>2021-06-22T15:36:30.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>​    使用Mac OS 运行<code>npm install -g npm</code> 出现如下图所示错误<a id="more"></a></p><p>报错如下：</p><p><img src="/images/2021/06/npmerror.png"></p><p>图中，方框圈起的报错信息，主要是说没有权限，关键词：<strong>permission denied</strong></p><p>底部椭圆圈起的内容，大概翻译一下，意思是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">permissions of the file and its containing directories, or try running</span><br><span class="line">npm ERR! the command again as root&#x2F;Administrator. </span><br><span class="line">文件及其包含的目录的权限，或尝试运行npm犯错!再次以root&#x2F;管理员的身份执行该命令。</span><br></pre></td></tr></table></figure><p>会报错是因为执行命令没有获取管理员权限，只需要<strong>在原有的命令前面加上sudo获取权限</strong>，然后回车时候需要输入管理员密码即可。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;​    使用Mac OS 运行&lt;code&gt;npm install -g npm&lt;/code&gt; 出现如下图所示错误</summary>
    
    
    
    <category term="工具使用" scheme="https://www.lauyongyi.cn/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
    
    <category term="工具使用" scheme="https://www.lauyongyi.cn/tags/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>使用python编写Uiautomator2.0脚本</title>
    <link href="https://www.lauyongyi.cn/Uiautomatou%202.0%20python%E7%AF%87.html"/>
    <id>https://www.lauyongyi.cn/Uiautomatou%202.0%20python%E7%AF%87.html</id>
    <published>2021-06-19T10:29:00.000Z</published>
    <updated>2021-06-21T15:57:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>​        近期研究 uiautomator2.0版本编写测试脚本，功能很强大，但有两个缺点：1. 测试脚本只能使用Java语言 2. 测试脚本要打包成jar或者apk包上传到设备上才能运行。在逛github的时候，看到了一个项目<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL29wZW5hdHgvdWlhdXRvbWF0b3Iy">Uiautomaotr2.0<i class="fa fa-external-link-alt"></i></span>，可以使用python编写uiautomator脚本，并在电脑上看到运行情况。</p><a id="more"></a><h5 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h5><p>首先，必须确保本地安装了python环境，然后按照[README][<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL29wZW5hdHgvdWlhdXRvbWF0b3IyL2Jsb2IvbWFzdGVyL1JFQURNRS5tZF0lRTclOUElODQlRTglQUYlQjQlRTYlOTglOEUlRTglQkYlOUIlRTglQTElOEMlRTUlQUUlODklRTglQTMlODUlRTMlODAlODI=">https://github.com/openatx/uiautomator2/blob/master/README.md]的说明进行安装。<i class="fa fa-external-link-alt"></i></span></p><p>安装命令如下：<code>pip3 install -U uiautomator2</code>或者<code>pip install -U uiautomator2</code>，</p><p>pip3 针对的是python2和python3共存的环境，例如自带python2.x的Mac os，Linux。</p><p>测试是否安装成功可以执行 <code>uiautomator2 --help</code></p><h5 id="脚本运行"><a href="#脚本运行" class="headerlink" title="脚本运行"></a>脚本运行</h5><p>打开pycharm，新建一个工程，创建python文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> uiautomator2</span><br><span class="line"></span><br><span class="line">d = uiautomator2.connect()</span><br><span class="line">print(d.info)</span><br></pre></td></tr></table></figure><p>运行python文件，在控制台会有一个倒计时输出。从打印信息可以看出，是在安装需要用到的APP</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[D 210619 18:46:21 __init__:634] kill process(ps): uiautomator</span><br><span class="line">[D 210619 18:46:22 init:59] Use cached assets: /Users/tinenlau/.uiautomator2/cache/app-uiautomator.apk-d3f17174fb/app-uiautomator.apk</span><br><span class="line">[D 210619 18:46:22 __init__:365] pm install /data/local/tmp/app-uiautomator.apk</span><br><span class="line">[D 210619 18:46:22 init:59] Use cached assets: /Users/tinenlau/.uiautomator2/cache/app-uiautomator-test.apk-652bf9e13c/app-uiautomator-test.apk</span><br><span class="line">[D 210619 18:46:22 __init__:365] pm install /data/local/tmp/app-uiautomator-test.apk</span><br></pre></td></tr></table></figure><p>安装结束后，就会打印出连接的设备的信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#x27;currentPackageName&#x27;: &#x27;net.oneplus.launcher&#x27;, &#x27;displayHeight&#x27;: 2297, &#x27;displayRotation&#x27;: 0, &#x27;displaySizeDpX&#x27;: 384, &#x27;displaySizeDpY&#x27;: 853, &#x27;displayWidth&#x27;: 1080, &#x27;productName&#x27;: &#x27;OnePlus8T_CH&#x27;, &#x27;screenOn&#x27;: True, &#x27;sdkInt&#x27;: 30, &#x27;naturalOrientation&#x27;: True&#125;</span><br></pre></td></tr></table></figure><h5 id="启动和停止APP运行"><a href="#启动和停止APP运行" class="headerlink" title="启动和停止APP运行"></a>启动和停止APP运行</h5><p>来源于[原文档][<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL29wZW5hdHgvdWlhdXRvbWF0b3IyI2xhdW5jaC1hbi1hcHBd">https://github.com/openatx/uiautomator2#launch-an-app]<i class="fa fa-external-link-alt"></i></span></p><h6 id="Launch-an-app"><a href="#Launch-an-app" class="headerlink" title="Launch an app"></a>Launch an app</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认的这种方法是先通过atx-agent解析apk包的mainActivity，然后调用am start -n $package/$activity启动</span></span><br><span class="line">d.app_start(<span class="string">&quot;com.example.hello_world&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 monkey -p com.example.hello_world -c android.intent.category.LAUNCHER 1 启动</span></span><br><span class="line"><span class="comment"># 这种方法有个副作用，它自动会将手机的旋转锁定给关掉</span></span><br><span class="line">d.app_start(<span class="string">&quot;com.example.hello_world&quot;</span>, use_monkey=<span class="literal">True</span>) <span class="comment"># start with package name</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过指定main activity的方式启动应用，等价于调用am start -n com.example.hello_world/.MainActivity</span></span><br><span class="line">d.app_start(<span class="string">&quot;com.example.hello_world&quot;</span>, <span class="string">&quot;.MainActivity&quot;</span>)</span><br></pre></td></tr></table></figure><h6 id="Stop-an-app"><a href="#Stop-an-app" class="headerlink" title="Stop an app"></a>Stop an app</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 相当于 `am force-stop`, 可能会丢失部分数据</span></span><br><span class="line">d.app_stop(<span class="string">&quot;com.example.hello_world&quot;</span>) </span><br><span class="line"><span class="comment"># 相当于 `pm clear`，清理APP相关的数据</span></span><br><span class="line">d.app_clear(<span class="string">&#x27;com.example.hello_world&#x27;</span>)</span><br></pre></td></tr></table></figure><h6 id="Stop-all-running-apps"><a href="#Stop-all-running-apps" class="headerlink" title="Stop all running apps"></a>Stop all running apps</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 停止所有APP的运行，但不清空后台任务</span></span><br><span class="line">d.app_stop_all()</span><br><span class="line"><span class="comment"># 停止除了 com.examples.demo 以外的其他APP</span></span><br><span class="line">d.app_stop_all(excludes=[<span class="string">&#x27;com.examples.demo&#x27;</span>])</span><br></pre></td></tr></table></figure><h6 id="获取APP详情"><a href="#获取APP详情" class="headerlink" title="获取APP详情"></a>获取APP详情</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">info = d.app_info(<span class="string">&quot;com.oneplus.gallery&quot;</span>)</span><br><span class="line">print(info)</span><br><span class="line"></span><br><span class="line"><span class="comment"># expect output</span></span><br><span class="line">&#123;   </span><br><span class="line"><span class="string">&#x27;packageName&#x27;</span>: <span class="string">&#x27;com.oneplus.gallery&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;mainActivity&#x27;</span>: <span class="string">&#x27;com.oneplus.gallery2.OPGalleryActivity&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;Gallery&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;versionName&#x27;</span>: <span class="string">&#x27;4.0.180&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;versionCode&#x27;</span>: <span class="number">24190720</span>,</span><br><span class="line"><span class="string">&#x27;size&#x27;</span>: <span class="number">137659606</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="打印正在运行的APP"><a href="#打印正在运行的APP" class="headerlink" title="打印正在运行的APP"></a>打印正在运行的APP</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> uiautomator2</span><br><span class="line"></span><br><span class="line">d = uiautomator2.connect()</span><br><span class="line">print(d.app_list_running())</span><br></pre></td></tr></table></figure><p>运行结果是：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;net.oneplus.odm.provider&#x27;, &#x27;com.heytap.market&#x27;, &#x27;org.ifaa.aidl.manager&#x27;, &#x27;com.tencent.mm&#x27;, &#x27;com.android.cellbroadcastreceiver&#x27;, &#x27;com.numberrecognition&#x27;, &#x27;com.qualcomm.qti.workloadclassifier&#x27;, &#x27;com.oneplus.opbugreportlite&#x27;, &#x27;com.google.android.gms&#x27;, &#x27;com.oneplus.coreservice&#x27;, &#x27;com.heytap.mcs&#x27;, &#x27;com.oneplus.sound.tuner&#x27;, &#x27;com.redteamobile.virtual.softsim&#x27;, &#x27;com.oneplus.instant.local.service&#x27;, &#x27;com.oneplus.communication.sync&#x27;, &#x27;com.github.uiautomator&#x27;, &#x27;com.qualcomm.qcrilmsgtunnel&#x27;, &#x27;com.android.permissioncontroller&#x27;, &#x27;com.oneplus.orm&#x27;, &#x27;org.codeaurora.ims&#x27;, &#x27;com.oneplus.camera&#x27;, &#x27;com.android.se&#x27;, &#x27;com.android.nfc&#x27;, &#x27;com.android.settings&#x27;, &#x27;com.oneplus.gamespace&#x27;, &#x27;com.oneplus.brickmode&#x27;, &#x27;com.amap.android.location&#x27;, &#x27;com.google.android.ext.services&#x27;, &#x27;com.oneplus.config&#x27;, &#x27;com.oneplus.account&#x27;, &#x27;com.android.systemui&#x27;, &#x27;com.qualcomm.qti.devicestatisticsservice&#x27;, &#x27;com.qualcomm.qtil.aptxals&#x27;, &#x27;com.oneplus.camera.service&#x27;, &#x27;com.nearme.instant.platform&#x27;, &#x27;com.oneplus.permissionutil&#x27;, &#x27;com.oneplus.share&#x27;, &#x27;com.tencent.soter.soterserver&#x27;, &#x27;com.oneplus&#x27;, &#x27;com.google.android.providers.media.module&#x27;, &#x27;com.heytap.cloud&#x27;, &#x27;com.oneplus.screenrecord&#x27;, &#x27;com.oneplus.gallery&#x27;, &#x27;net.oneplus.weather&#x27;, &#x27;com.qualcomm.location&#x27;, &#x27;com.google.android.inputmethod.latin&#x27;, &#x27;com.android.cellbroadcastservice&#x27;, &#x27;com.qualcomm.qti.telephonyservice&#x27;, &#x27;com.android.providers.calendar&#x27;, &#x27;com.oneplus.camera.pictureprocessing&#x27;, &#x27;com.oneplus.mms&#x27;, &#x27;com.android.vending&#x27;, &#x27;com.android.phone&#x27;, &#x27;com.dolby.daxservice&#x27;, &#x27;net.oneplus.launcher&#x27;, &#x27;com.oneplus.voicewakeup&#x27;, &#x27;com.qualcomm.qti.uim&#x27;, &#x27;com.heytap.openid&#x27;]</span><br></pre></td></tr></table></figure><h6 id="等待指定app运行"><a href="#等待指定app运行" class="headerlink" title="等待指定app运行"></a>等待指定app运行</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> uiautomator2</span><br><span class="line"></span><br><span class="line">d = uiautomator2.connect()</span><br><span class="line">pid = d.app_wait(<span class="string">&quot;com.oneplus.camera&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> pid:</span><br><span class="line">    print(<span class="string">&quot;com.oneplus.camera is not running&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;com.oneplus.camera pid is %d&quot;</span> % pid)</span><br><span class="line"></span><br><span class="line">d.app_wait(<span class="string">&quot;com.oneplus.camera&quot;</span>, front=<span class="literal">True</span>)   <span class="comment"># 等待应用前台运行</span></span><br><span class="line"><span class="comment"># d.app_wait(&quot;com.oneplus.camera&quot;, timeout=20.0)  #app_wait 默认等待时间就是20s</span></span><br></pre></td></tr></table></figure><p>运行结果如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">com.oneplus.camera pid is 5577  #app运行时的打印</span><br><span class="line"></span><br><span class="line">com.oneplus.camera is not running  #app没有运行时的打印</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;​        近期研究 uiautomator2.0版本编写测试脚本，功能很强大，但有两个缺点：1. 测试脚本只能使用Java语言 2. 测试脚本要打包成jar或者apk包上传到设备上才能运行。在逛github的时候，看到了一个项目&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9naXRodWIuY29tL29wZW5hdHgvdWlhdXRvbWF0b3Iy&quot;&gt;Uiautomaotr2.0&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;，可以使用python编写uiautomator脚本，并在电脑上看到运行情况。&lt;/p&gt;</summary>
    
    
    
    <category term="工具使用" scheme="https://www.lauyongyi.cn/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
    
    <category term="python" scheme="https://www.lauyongyi.cn/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Fiddler的使用</title>
    <link href="https://www.lauyongyi.cn/Fiddler%C2%A0%E8%BF%87%E6%BB%A4.html"/>
    <id>https://www.lauyongyi.cn/Fiddler%C2%A0%E8%BF%87%E6%BB%A4.html</id>
    <published>2021-06-04T14:37:00.000Z</published>
    <updated>2021-06-14T07:26:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>​        使用Fiddler抓包的时候，常常会把其他不需要的链接也一并抓取显示，这时候就需要用到过滤功能<strong>Filters</strong>。</p><a id="more"></a><h5 id="User-Filters启用"><a href="#User-Filters启用" class="headerlink" title="User Filters启用"></a>User Filters启用</h5><p>​        一般情况下，User Filter 是没有启动，状态如下图所示</p><p><img src="/images/2021/06/userfilters.png" alt="默认状态"></p><p>点击选择后，状态变成已启用，如下图所示</p><p><img src="/images/2021/06/1622820426.png" alt="启用状态"></p><h5 id="Action的功能"><a href="#Action的功能" class="headerlink" title="Action的功能"></a>Action的功能</h5><p>Action：Run Filterset now是否运行，Load Filterset加载，Save Filterset保存；</p><p><img src="/images/2021/06/1622820620.png" alt="Action的功能"></p><h5 id="Hosts-过滤"><a href="#Hosts-过滤" class="headerlink" title="Hosts 过滤"></a>Hosts 过滤</h5><p><strong>Zone</strong>：指定只显示内网（Intranet）或互联网（Internet）的内容；</p><p><img src="/images/2021/06/1622820880.png" alt="Zone"></p><p><strong>Host</strong>：指定显示某个域名下的会话；</p><p>-No Host Filter：无HOST过滤；<br>Hide the following Hosts：隐藏以下HOST；<br>Show only the following Hosts：仅显示以下Hosts<br>Flag the following Hosts：标记以下HOST；<br>输入多个HOST，多个之前用 <strong>;</strong> 或 <strong>,</strong> 或 <strong>回车键</strong> 分隔；<br>支持通配符如：*,baidu.com；</p><p><img src="/images/2021/06/1622820955.png" alt="Host"></p><p>步骤：选择Hosts—&gt;输入过滤条件单条件<code>ir.baidu.com</code>或多条件<code>ir.baidu.com;www.baidu.com</code>或通配符<code>*.baidu.com</code>—&gt;Changes not yet saved—&gt;选择Ations中Run Filterset now；</p><p><img src="/images/2021/06/fiddler01.png" alt="Hosts过滤"></p><h5 id="Client-Process-过滤"><a href="#Client-Process-过滤" class="headerlink" title="Client Process 过滤"></a>Client Process 过滤</h5><p>客户端进程过滤规则：</p><p> Show only traffic from：你可以指定只捕获哪个Windows进程中的请求；<br> Show only Internet Explorer traffic：只显示IE发出的请求；<br> Hide Windows RSS platform traffic：隐藏Windows RSS平台发出的请求；</p><p><img src="/images/2021/06/fiddler02.png" alt="ClientProcess过滤"></p><h5 id="Request-Headers-过滤"><a href="#Request-Headers-过滤" class="headerlink" title="Request Headers 过滤"></a>Request Headers 过滤</h5><p>Request header过滤规则：</p><p> 经常使用：Show only if URL contains：只显示包含特定字符的请求；<br> Hide if URL contains：隐藏包含特定字符的请求；<br> Flag requests with headers：标记带有特定header的请求；<br> Delete request headers：删除请求header；<br> Set request header：设置请求的header；</p><p><img src="/images/2021/06/fiddler03.png" alt="headers过滤"></p><h5 id="Breakpoints"><a href="#Breakpoints" class="headerlink" title="Breakpoints"></a>Breakpoints</h5><p>断点设置规则：</p><p> Break request on HTTP POST：给所有POST请求设置断点；<br> Break request on HTTP GET with QueryString：给所有带参数的GET请求设置断点；<br> Break on XMLHttpRequest：给所有XML请求设置断点；<br> Break response on Content-Type：给包含特定的Content-Type返回设置断点；<br><img src="/images/2021/06/fiddler04.png" alt="断点设置"></p><h5 id="Response-Status-Code-过滤"><a href="#Response-Status-Code-过滤" class="headerlink" title="Response Status Code 过滤"></a>Response Status Code 过滤</h5><p>响应HTTP状态过滤规则：</p><p> Hide success(2xx)：隐藏响应成功的session(2xx)；<br> Hide Authentication demands(401,407)：隐藏未经授权被拒绝的session(401,407；<br> Hide redirects(300,301,302,303,307)：隐藏重定向的session(300,301,302,303,307)；<br> Hide Not Modified(304)：隐藏无变更的session(304)；</p><p><img src="/images/2021/06/fiddler05.png"></p><h5 id="Response-Headers"><a href="#Response-Headers" class="headerlink" title="Response Headers"></a>Response Headers</h5><p>Response header过滤规则：</p><p> Flag response that set cookies：标记会设置cookie的响应；<br> Flag response with headers：标记带有特定header的响应；<br> Delete response headers：删除响应header；<br> Set response header：设置响应的header；</p><p><img src="/images/2021/06/fiddler06.png" alt="Response header"></p><h5 id="Response-Type-and-Size"><a href="#Response-Type-and-Size" class="headerlink" title="Response Type and Size"></a>Response Type and Size</h5><p>响应类型和大小过滤规则：</p><p> Show all Content-Type：显示所有响应类型；<br> Hide smaller than ？KB：隐藏小于指定大小的session；<br> Hide larger than ？KB：隐藏大于指定大小的session；<br> Time HeatMap：获得即时数据（绿色阴影代表响应时间在50毫秒以内；超过50毫秒但在300毫秒之内的响应条目没有颜色；响应时间在300至500毫秒之间的会涂以黄色；超过500毫秒的用红色底纹显示）；<br> Block script files：阻止脚本文件，显示为404；<br> Block image files：阻止图片文件；<br> Block SWF files：阻止SWF文件；<br> Block CSS files：阻止CSS文件；</p><p><img src="/images/2021/06/fiddler07.png"></p><p><img src="/images/2021/06/fiddler08.png"></p><p><img src="/images/2021/06/fiddler09.png"></p><p><img src="/images/2021/06/fiddler10.png"></p><p><img src="/images/2021/06/fiddler11.png"></p><h5 id="鼠标右键菜单过滤功能"><a href="#鼠标右键菜单过滤功能" class="headerlink" title="鼠标右键菜单过滤功能"></a>鼠标右键菜单过滤功能</h5><p><img src="/images/2021/06/fiddler12.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;​        使用Fiddler抓包的时候，常常会把其他不需要的链接也一并抓取显示，这时候就需要用到过滤功能&lt;strong&gt;Filters&lt;/strong&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="工具使用" scheme="https://www.lauyongyi.cn/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
    
    <category term="工具使用" scheme="https://www.lauyongyi.cn/tags/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>常见的运行异常</title>
    <link href="https://www.lauyongyi.cn/%E5%B8%B8%E8%A7%81%E7%9A%84%E8%BF%90%E8%A1%8C%E5%BC%82%E5%B8%B8.html"/>
    <id>https://www.lauyongyi.cn/%E5%B8%B8%E8%A7%81%E7%9A%84%E8%BF%90%E8%A1%8C%E5%BC%82%E5%B8%B8.html</id>
    <published>2021-05-28T15:37:00.000Z</published>
    <updated>2021-06-18T15:37:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>​        安卓常见的异常主要有两种：编译时的异常和运行是的异常。当前主要说明的是运行时的异常。</p><a id="more"></a><h5 id="NullPointerException（空指针异常）"><a href="#NullPointerException（空指针异常）" class="headerlink" title="NullPointerException（空指针异常）"></a>NullPointerException（空指针异常）</h5><p>​         俗称NPE。调用了未经初始化的对象或者是不存在的对象。当应用试图在要求使用对象的地方使用了null时，抛出该异常。譬如：调用null对象的实例方法、访问null对象的属性、计算null对象的长度、使用throw语句抛出null等等。<br>         目前，客户端页面显示很多需要依赖服务端返回数据，当网络异常时，没有获取到对象，此时为null，就很容易出现nullpointerException异常。有可能也是代码错误，没有new造成的。</p><h6 id="如何检测java-lang-NullPointerException"><a href="#如何检测java-lang-NullPointerException" class="headerlink" title="如何检测java.lang.NullPointerException"></a>如何检测java.lang.NullPointerException</h6><p>检测<code>NullPointerException</code>非常简单，只需查看异常跟踪，它将显示异常的类名和行号。然后查看代码并查看可能为<code>null</code>。只要看一下上面的所有例子，从堆栈跟踪中可以清楚地看出是什么导致了<code>null</code>指针异常。</p><h6 id="错误示例"><a href="#错误示例" class="headerlink" title="错误示例"></a>错误示例</h6><p><strong>1. 调用实例方法时出现NullPointerException</strong></p><p>示例代码 - </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Temp</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Temp t = initT();</span><br><span class="line"></span><br><span class="line">        t.foo(<span class="string">&quot;Hi&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Temp <span class="title">initT</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        System.out.println(s.toLowerCase());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当运行上面的程序时，它会抛出<code>NullPointerException</code>异常错误消息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.NullPointerException</span><br><span class="line">    at Temp.main(Temp.java:7)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在语句<code>t.foo(&quot;Hi&quot;)</code>中抛出<code>NullPointerException</code>异常; 因为<code>t</code>在这里为<code>null</code>。</p><p><strong>2. 访问/修改null对象的字段时出现NullPointerException</strong></p><p>示例代码 - </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Temp</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Temp t = initT();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i = t.x;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Temp <span class="title">initT</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行上面示例代码，得到以下结果 - </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.NullPointerException</span><br><span class="line">    at Temp.main(Temp.java:9)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>语句<code>int i = t.x</code>中抛出<code>NullPointerException</code>异常; 因为<code>t</code>在这里为<code>null</code>。</p><p><strong>3. 在方法参数中传递null时NullPointerException</strong></p><p>示例代码 - </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Temp</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        foo(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        System.out.println(s.toLowerCase());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这是<code>java.lang.NullPointerException</code>最常见的情况之一，因为它传递<code>null</code>参数给调用者。错误信息如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.NullPointerException</span><br><span class="line">at NPE.foo(NPE.java:9)</span><br><span class="line">at NPE.main(NPE.java:4)</span><br></pre></td></tr></table></figure><p><strong>4. 抛出null时抛出java.lang.NullPointerException</strong></p><p>示例代码 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Temp</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是上面程序的异常堆栈跟踪，由于<code>throw null</code>所以抛出<code>NullPointerException</code>异常。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.NullPointerException</span><br><span class="line">    at Temp.main(Temp.java:5)</span><br></pre></td></tr></table></figure><p><strong>5. 获取null数组的长度时抛出java.lang.NullPointerException</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Temp</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] data = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> len = data.length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行上面示例代码，得到以下结果 - </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.NullPointerException</span><br><span class="line">    at Temp.main(Temp.java:7)</span><br></pre></td></tr></table></figure><p><strong>6. 访问null数组的索引值时出现NullPointerException</strong></p><p>示例代码 - </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Temp</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] data = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> len = data[<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行上面示例代码，得到以下结果 - </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.NullPointerException</span><br><span class="line">    at Temp.main(Temp.java:7)</span><br></pre></td></tr></table></figure><p><strong>7. 在null对象上同步时出现java.lang.NullPointerException</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Temp</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String mutex = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span>(mutex) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;synchronized block&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>synchronized(mutex)</code>将抛出<code>NullPointerException</code>，因为<code>mutex</code>对象为<code>null</code>。</p><p><strong>8. java.lang.NullPointerException引发HTTP状态500</strong></p><p>有时会将错误页面作为java Web应用程序响应发送，错误消息为“HTTP状态500  - 内部服务器错误”，根本原因就是<code>java.lang.NullPointerException</code>异常。</p><p>下面是一段编辑了Spring MVC Example项目并更改了<code>HomeController</code>方法，如下所示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/user&quot;, method = RequestMethod.POST)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">user</span><span class="params">(<span class="meta">@Validated</span> User user, Model model)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;User Page Requested&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;User Name: &quot;</span>+user.getUserName().toLowerCase());</span><br><span class="line">        System.out.println(<span class="string">&quot;User ID: &quot;</span>+user.getUserId().toLowerCase());</span><br><span class="line">        model.addAttribute(<span class="string">&quot;userName&quot;</span>, user.getUserName());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;user&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>下图显示了Web应用程序响应引发的错误消息。<br><img src="/images/2021/06/NPE01.png" alt="NullPointerException引发HTTP状态500"></p><p>下面是异常堆栈跟踪 - </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">HTTP Status <span class="number">500</span> – Internal Server Error</span><br><span class="line"></span><br><span class="line">Type Exception Report</span><br><span class="line"></span><br><span class="line">Message Request processing failed; nested exception is java.lang.NullPointerException</span><br><span class="line"></span><br><span class="line">Description The server encountered an unexpected condition that prevented it from fulfilling the request.</span><br><span class="line"></span><br><span class="line">Exception</span><br><span class="line"></span><br><span class="line">org.springframework.web.util.NestedServletException: Request processing failed; nested exception is java.lang.NullPointerException</span><br><span class="line">    org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:<span class="number">982</span>)</span><br><span class="line">    org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:<span class="number">872</span>)</span><br><span class="line">    javax.servlet.http.HttpServlet.service(HttpServlet.java:<span class="number">661</span>)</span><br><span class="line">    org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:<span class="number">846</span>)</span><br><span class="line">    javax.servlet.http.HttpServlet.service(HttpServlet.java:<span class="number">742</span>)</span><br><span class="line">    org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:<span class="number">52</span>)</span><br><span class="line">Root Cause</span><br><span class="line"></span><br><span class="line">java.lang.NullPointerException</span><br><span class="line">    com.journaldev.spring.controller.HomeController.user(HomeController.java:<span class="number">38</span>)</span><br><span class="line">    sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">    sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class="number">62</span>)</span><br><span class="line">    sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class="number">43</span>)</span><br><span class="line">    java.lang.reflect.Method.invoke(Method.java:<span class="number">498</span>)</span><br></pre></td></tr></table></figure><p>根本原因是语句<code>user.getUserId().toLowerCase()</code>中引发了<code>NullPointerException</code>，因为<code>user.getUserId()</code>返回<code>null</code>。</p><h6 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h6><p>​        这种异常通常是调用一个对象的接口方法抛出的，在调用接口方法之前，要进行判空或者进行try-catch，这样基本可以规避大部分空指针异常。<br>​        最常见是在 回调接口, 如 网络请求回调，第三方登录回调 返回的时候 调用 context.startActivity 时 context 为空导致。可以在 context 为空的时候使用 Application Context， 加上<br> if (!(context instanceof Activity)) {<br> intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);<br> }</p><h5 id="ArrayindexOutOfBoundsExceptions（数组越界异常）"><a href="#ArrayindexOutOfBoundsExceptions（数组越界异常）" class="headerlink" title="ArrayindexOutOfBoundsExceptions（数组越界异常）"></a>ArrayindexOutOfBoundsExceptions（数组越界异常）</h5><h6 id="出现的原因"><a href="#出现的原因" class="headerlink" title="出现的原因"></a>出现的原因</h6><p>​        如果访问数组元素的时候，索引编号并不存在</p><p>错误示例</p><p>使用不合法的索引访问数组时会报数组越界这种错误，数组arr的合法错误范围是[0, arr.length-1];当你访问这之外的索引时会报这个错。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= arr.length; i++) &#123;</span><br><span class="line">            System.out.println(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出的错误提示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">java.lang.ArrayIndexOutOfBoundsException: <span class="number">3</span></span><br><span class="line">at Test.main(Test.java:<span class="number">5</span>)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class="number">57</span>)</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class="number">43</span>)</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:<span class="number">606</span>)</span><br><span class="line">at edu.rice.cs.drjava.model.compiler.JavacCompiler.runCommand(JavacCompiler.java:<span class="number">272</span>)</span><br></pre></td></tr></table></figure><h6 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h6><p>​        这种情况一般要在数组循环前做好length判断，index超出length上限和下限时都会报错。举例如下：一个数组int test[N]，一共有N个元素分别是test[0]~test[N-1]，如果调用test[N]，将会报错。建议读取时，不要超过数组的长度（array.length）。<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0NjQ2NDQ5L2FydGljbGUvZGV0YWlscy83NjE0NjY1OQ==">参考链接<i class="fa fa-external-link-alt"></i></span><br><strong>Android中一种常见情形就是上拉刷新中header也会作为listview的第0个位置，如果判断失误很容易造成越界。</strong></p><h5 id="indexOutOfBoundsException（越界异常）"><a href="#indexOutOfBoundsException（越界异常）" class="headerlink" title="indexOutOfBoundsException（越界异常）"></a>indexOutOfBoundsException（越界异常）</h5><h6 id="出现的原因-1"><a href="#出现的原因-1" class="headerlink" title="出现的原因"></a>出现的原因</h6><p>​        该异常表示不合法下标，通常是因为访问了list不合法的位置，建议检查数据是否越界。</p><h6 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h6><p> 1.遍历数组/字符串等集合前，要判断遍历对象的长度；<br> 2.操作数组/字符串等集合前，要检查角标是否在长度允许范围内；<br> 3.ListView操作不当也会引起该异常，这种情况下一般是由于List渲染的时候，外面的数据源发生变化导致的。举例如ListView滚动时点击刷新将会报错，解决方法是ListView滚动时将刷新置为不可点击。</p><h5 id="outOfMemory（内存溢出）"><a href="#outOfMemory（内存溢出）" class="headerlink" title="outOfMemory（内存溢出）"></a>outOfMemory（内存溢出）</h5><p>​        指应用系统中存在无法回收的内存或使用的内存过多，最终使得程序运行要用到的内存大于能提供的最大内存，俗称<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2VmZjY2Ni9hcnRpY2xlL2RldGFpbHMvNTIwNzE4NzM=">OOM<i class="fa fa-external-link-alt"></i></span></p><h6 id="出现的原因-2"><a href="#出现的原因-2" class="headerlink" title="出现的原因"></a>出现的原因</h6><p>​    （1）内存中加载的数据量过于庞大，如一次从数据库取出过多数据；<br>​    （2）集合类中有对对象的引用，使用完后未清空，使得JVM不能回收；<br>​    （3）代码中存在死循环或循环产生过多重复的对象实体；<br>​    （4）使用的第三方软件中的BUG；<br>​    （5）启动参数内存值设定的过小；</p><p>​        通俗解释：系统已经不能再分配出你所需要的空间，比如系统现在只有1G的空间，但是你偏偏要2个G空间，这就叫内存溢出 例子：一个盘子用尽各种方法只能装4个果子，你装了5个，结果掉倒地上不能吃了。这就是溢出。</p><h6 id="常见错误提示"><a href="#常见错误提示" class="headerlink" title="常见错误提示"></a>常见错误提示</h6><p>​        [相关例子说明][<span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAxNzIyNjM1OV0=">https://segmentfault.com/a/1190000017226359]<i class="fa fa-external-link-alt"></i></span></p><p>​        1、OOM fo heap ：<code>java.lang:OutOfMemoryError: Java heap space</code>，此OOM是由于JVM中heap的最大值不满足需要，将设置heap的最大值调高即可。</p><p>​        2、OOM for Perm：<code>java.lang:OutOfMemoryError: Java perm space</code>，此OOM是由于JVM中perm的最大值不满足需要，将设置perm的最大值调高即可，参数样例为：-XX:MaxPermSize=512M</p><p>​        3、OOM for GC=&gt;例如：<code>java.lang:OutOfMemoryError: GC overhead limit exceeded</code>，此OOM是由于JVM在GC时，对象过多，导致内存溢出，建议调整GC的策略</p><p>​        4、OOM for native thread created：<code>java.lang.OutOfMemoryError: unable to create new native threa</code>，此OOM是由于进程剩余的空间不足，导致创建进程失败</p><p>​        5、OOM for allocate huge array：<code>Exception in thread &quot;main&quot;: java.lang.OutOfMemoryError: Requested array size exceeds VM limit</code>，此类信息表明应用程序（或者被应用程序调用的APIs）试图分配一个大于堆大小的数组</p><p>​        6、OOM for small swap：<code>Exception in thread &quot;main&quot;: java.lang.OutOfMemoryError: request &lt;size&gt; bytes for &lt;reason&gt;. Out of swap space?</code>,抛出这类错误，是由于从native堆中分配内存失败，并且堆内存可能接近耗尽</p><p>​        7、OutOfMemoryError： <code>thrown while trying to throw OutOfMemoryError; no stack trace available</code>，抛出这类错误，一般是由于方法重复调用、死循环引起，直至内存耗尽</p><h5 id="内存泄漏：-Memory-Leak"><a href="#内存泄漏：-Memory-Leak" class="headerlink" title="内存泄漏：  (Memory Leak)"></a>内存泄漏：  (Memory Leak)</h5><p>​        指程序中己动态分配的堆内存由于某种原因程序未释放或无法释放，造成系统内存的浪费，导致程序运行速度减慢甚至系统崩溃等严重后果。</p><p><strong>以产生的方式来分类，内存泄漏可以分为四类：</strong><br><strong>（1）常发性内存泄漏：</strong>发生内存泄漏的代码会被多次执行到，每次被执行时都会导致一块内存泄漏。<br><strong>（2）偶发性内存泄漏：</strong>发生内存泄漏的代码只有在某些特定环境或操作过程下才会发生。常发性和偶发性是相对的。对于特定的环境，偶发性的也许就变成了常发性的。所以测试环境和测试方法对检测内存泄漏至关重要。<br><strong>（3）一次性内存泄漏：</strong>发生内存泄漏的代码只会被执行一次，或者由于算法上的缺陷，导致总会有一块且仅有一块内存发生泄漏。<br><strong>（4）隐式内存泄漏：</strong>程序在运行过程中不停的分配内存，但是直到结束的时候才释放内存。严格的说这里并没有发生内存泄漏，因为最终程序释放了所有申请的内存。但是对于一个服务器程序，需要运行几天，几周甚至几个月，不及时释放内存也可能导致最终耗尽系统的所有内存。所以，我们称这类内存泄漏为隐式内存泄漏。从用户使用程序的角度来看，内存泄漏本身不会产生什么危害，作为一般的用户，根本感觉不到内存泄漏的存在。真正有危害的是内存泄漏的堆积，这会最终耗尽系统所有的内存。从这个角度来说，一次性内存泄漏并没有什么危害，因为它不会堆积，而隐式内存泄漏危害性则非常大，因为较之于常发性和偶发性内存泄漏它更难被检测到。</p><p><strong>memory leak会最终会导致out of memory！</strong></p><p>内存泄漏和内存溢出的相关说明例子：[博客园][<span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20veGlhb3hpL3AvNzM1NDg1Ny5odG1sXSVFRiVCQyU4Q1slRTclOTklQkUlRTUlQkElQTYlRTclOTklQkUlRTclQTclOTElRUYlQkMlOUElRTUlODYlODUlRTUlQUQlOTglRTYlQjMlODQlRTYlQkMlOEZdW2h0dHBzOi8vYmFpa2UuYmFpZHUuY29tL2l0ZW0vJUU1JTg2JTg1JUU1JUFEJTk4JUU2JUJBJUEyJUU1JTg3JUJBXSVFRiVCQyU4Q1slRTclOTklQkUlRTUlQkElQTYlRTclOTklQkUlRTclQTclOTElRUYlQkMlOUElRTUlODYlODUlRTUlQUQlOTglRTYlQkElQTIlRTUlODclQkFdW2h0dHBzOi8vYmFpa2UuYmFpZHUuY29tL2l0ZW0vJUU1JTg2JTg1JUU1JUFEJTk4JUU2JUIzJTg0JUU2JUJDJThGXQ==">https://www.cnblogs.com/xiaoxi/p/7354857.html]，[百度百科：内存泄漏][https://baike.baidu.com/item/%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA]，[百度百科：内存溢出][https://baike.baidu.com/item/%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F]<i class="fa fa-external-link-alt"></i></span></p><h6 id="拓展知识"><a href="#拓展知识" class="headerlink" title="拓展知识"></a>拓展知识</h6><p>​        jvm管理的内存大致包括三种不同类型的内存区域：Permanent Generation space（永久保存区域）、Heap space(堆区域)、Java Stacks(Java栈）。其中永久保存区域主要存放Class（类）和Meta的信息，Class第一次被Load的时候被放入PermGen space区域，Class需要存储的内容主要包括方法和静态属性。堆区域用来存放Class的实例（即对象），对象需要存储的内容主要是非静态属性。每次用new创建一个对象实例后，对象实例存储在堆区域中，这部分空间也被jvm的垃圾回收机制管理。而Java栈跟大多数编程语言包括汇编语言的栈功能相似，主要基本类型变量以及方法的输入输出参数。Java程序的每个线程中都有一个独立的堆栈。</p><h5 id="illegalStateException（非法状态异常）"><a href="#illegalStateException（非法状态异常）" class="headerlink" title="illegalStateException（非法状态异常）"></a>illegalStateException（非法状态异常）</h5><h6 id="常见错误提示-1"><a href="#常见错误提示-1" class="headerlink" title="常见错误提示"></a>常见错误提示</h6><p><code>java.lang.IllegalStateException：Cannot forward a response that is already committed </code><br><code>IllegalStateException：response already commited </code><br><code>IllegalStateException：getOutputStream() has already been called for this request</code></p><p>出现原因</p><p>​        该异常表示，当前对客户端的响应已经结束，不能在响应已经结束（或说消亡）后再向客户端（实际上是缓冲区）输出任何内容。</p><p>​        这里涉及到java的io流：<span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODQ0OTA0MDMzNjU2NzgyODU2">flush()<i class="fa fa-external-link-alt"></i></span>，我们知道在使用读写流的时候数据先被读入内存这个缓冲区中，然后再写入文件，但是当数据读完时不代表数据已经写入文件完毕，因为可能还有一部分仍未写入文件而留在内存中，这时调用flush()方法就会把缓冲区的数据强行清空输出，因此flush()的作用就是保证缓存清空输出。</p><p>　　 response是服务端对客户端请求的一个响应，其中封装了响应头、状态码、内容等，服务端在把response提交到客户端之前，会向缓冲区内写入响应头和状态码，然后将所有内容flush。这就标志着该次响应已经committed(提交)。对于当前页面中已经committed(提交)的response，就不能再使用这个response向缓冲区写任何东西（注：同一个页面中的response.XXX()是同一个response的不同方法，只要其中一个已经导致了committed，那么其它类似方式的调用都会导致 IllegalStateException异常）。</p><h5 id="illegalArguementException（非法参数异常）"><a href="#illegalArguementException（非法参数异常）" class="headerlink" title="illegalArguementException（非法参数异常）"></a>illegalArguementException（非法参数异常）</h5><h6 id="常见错误提示-2"><a href="#常见错误提示-2" class="headerlink" title="常见错误提示"></a>常见错误提示</h6><p><code> java.lang.IllegalArgumentException</code></p><h6 id="出现原因"><a href="#出现原因" class="headerlink" title="出现原因"></a>出现原因</h6><p>​        参数不匹配异常，通常由于传递了不正确的参数导致。</p><p>常见于：</p><ol><li>Activity、Service状态异常；</li><li>非法URL；</li><li>UI线程操作</li><li>Fragment中嵌套了子Fragment，Fragment被销毁，而内部Fragment未被销毁，所以导致再次加载时重复，在onDestroyView() 中将内部Fragment销毁即可</li><li>在请求网络的回调中使用了glide.into(view),view已经被销毁会导致该错误</li></ol><h6 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h6><p>​        因为参数不合法导致抛出IllegalArgumentException，请根据堆栈信息描述的出错的函数参数，按照要求传入正确的参数。</p><h6 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h6><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC82NWNiZTg4NzJjMWI=">错误堆栈信息<i class="fa fa-external-link-alt"></i></span></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">java.lang.IllegalArgumentException: Cannot locate declared field <span class="class"><span class="keyword">class</span> <span class="title">org</span>.<span class="title">apache</span>.<span class="title">http</span>.<span class="title">impl</span>.<span class="title">client</span>.<span class="title">HttpClientBuilder</span>.<span class="title">sslContext</span></span></span><br><span class="line">    at org.apache.commons.lang3.Validate.isTrue(Validate.java:155)</span><br><span class="line">    at org.apache.commons.lang3.reflect.FieldUtils.readDeclaredField(FieldUtils.java:<span class="number">512</span>)</span><br><span class="line">    at com.gargoylesoftware.htmlunit.HttpWebConnection.getField(HttpWebConnection.java:<span class="number">1095</span>)</span><br><span class="line">    at com.gargoylesoftware.htmlunit.HttpWebConnection.createConnectionManager(HttpWebConnection.java:<span class="number">1017</span>)</span><br><span class="line">    at com.gargoylesoftware.htmlunit.HttpWebConnection.getResponse(HttpWebConnection.java:<span class="number">174</span>)</span><br><span class="line">    at com.gargoylesoftware.htmlunit.WebClient.loadWebResponseFromWebConnection(WebClient.java:<span class="number">1397</span>)</span><br><span class="line">    at com.gargoylesoftware.htmlunit.WebClient.loadWebResponse(WebClient.java:<span class="number">1315</span>)</span><br><span class="line">    at com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:<span class="number">394</span>)</span><br><span class="line">    at com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:<span class="number">315</span>)</span><br><span class="line">    at com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:<span class="number">463</span>)</span><br><span class="line">    at com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:<span class="number">448</span>)</span><br><span class="line">    at com.epoint.dzdamanager.login.DnetDefaultLoginForUrlImpl.doLogin(DnetDefaultLoginForUrlImpl.java:<span class="number">87</span>)</span><br><span class="line">    at com.epoint.ztb.htmlutil.HtmlToPdf.getHtmlPageFromUrlF9(vb:<span class="number">80</span>)</span><br><span class="line">    at com.epoint.dzdamanager.domain.DownZtbData.pageToPdf(DownZtbData.java:<span class="number">446</span>)</span><br><span class="line">    at com.epoint.dzdamanager.domain.DownZtbData.genFileList(DownZtbData.java:<span class="number">319</span>)</span><br><span class="line">    at com.epoint.dzdamanager.domain.DownZtbData.workForBarStep(DownZtbData.java:<span class="number">152</span>)</span><br><span class="line">    at com.epoint.dzdamanager.pack.job.DoPackServiceImp.doPack(DoPackServiceImp.java:<span class="number">87</span>)</span><br><span class="line">    at com.epoint.dzdamanager.pack.job.DoPackJob.execute(DoPackJob.java:<span class="number">35</span>)</span><br><span class="line">    at org.quartz.core.JobRunShell.run(JobRunShell.java:<span class="number">202</span>)</span><br><span class="line">    at org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:<span class="number">573</span>)</span><br></pre></td></tr></table></figure><h6 id="例子分析"><a href="#例子分析" class="headerlink" title="例子分析"></a>例子分析</h6><p>重点提示<code>Cannot locate declared field class org.apache.http.impl.client.HttpClientBuilder.sslContext</code><br>经排查，htmlunit.jar包在4.4.1版本中HttpClientBuilder该类无sslContext属性，属性名称为sslcontext，从而引发参数报错。</p><h5 id="ClassCastException（类型强制转换异常）"><a href="#ClassCastException（类型强制转换异常）" class="headerlink" title="ClassCastException（类型强制转换异常）"></a>ClassCastException（类型强制转换异常）</h5><h6 id="常见错误提示-3"><a href="#常见错误提示-3" class="headerlink" title="常见错误提示"></a>常见错误提示</h6><p><code>java.lang.ClassCastException</code></p><h6 id="出现原因-1"><a href="#出现原因-1" class="headerlink" title="出现原因"></a>出现原因</h6><p>​        当试图将对某个对象强制执行向下转型，但该对象又不可转换为其子类的实例时将引发该异常。假设有类A和B（A不是B的父类或子类），O是A的实例，那么当强制将O构造为类B的实例时抛出该异常。<span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vY29kZXItenljL3AvMTA1NzMwMDUuaHRtbA==">例子<i class="fa fa-external-link-alt"></i></span></p><h5 id="java-lang-ArithmeticException-（算术条件异常）"><a href="#java-lang-ArithmeticException-（算术条件异常）" class="headerlink" title="java.lang.ArithmeticException （算术条件异常）"></a>java.lang.ArithmeticException （算术条件异常）</h5><p>​    异常算术条件时抛出。 例如，“除以零”的整数会抛出。</p><h6 id="错误示例-1"><a href="#错误示例-1" class="headerlink" title="错误示例"></a>错误示例</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EXDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> temp = x/y;     <span class="comment">//此处出现异常</span></span><br><span class="line">        System.out.println(x/y);</span><br><span class="line">        System.out.println(<span class="string">&quot;计算结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.ArithmeticException: / by zero</span><br><span class="line">at EXDemo.main(EXDemo.java:5)</span><br></pre></td></tr></table></figure><p>在以上例子中,因为被除数为0,所以程序中出现了异常,从运行结果可以发现,如果不对异常进行处理,则一旦出现了异常后,程序就立刻推出,所以后面的语句并没有打印输出.</p><p>   在计算机的发展中有两大计算机”杀手”,一个是断电,另外一个是被除数为0;因为被除数为0在数学上的解是无穷大,对于计算机来说,意味着内存将被全部占满.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;​        安卓常见的异常主要有两种：编译时的异常和运行是的异常。当前主要说明的是运行时的异常。&lt;/p&gt;</summary>
    
    
    
    <category term="Android" scheme="https://www.lauyongyi.cn/categories/Android/"/>
    
    
    <category term="Android开发" scheme="https://www.lauyongyi.cn/tags/Android%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>adb shell pm 命令解析</title>
    <link href="https://www.lauyongyi.cn/adb%20pm%20%E5%91%BD%E4%BB%A4.html"/>
    <id>https://www.lauyongyi.cn/adb%20pm%20%E5%91%BD%E4%BB%A4.html</id>
    <published>2021-05-16T02:42:00.000Z</published>
    <updated>2021-05-21T13:57:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>​        pm命令 为包管理（package manager）的简称，是Android开发与测试后过程中必不可少的命令，可以使用pm命令来执行应用的安装和查询应用信息、系统权限以及控制应用。</p><a id="more"></a><h5 id="pm命令格式"><a href="#pm命令格式" class="headerlink" title="pm命令格式"></a>pm命令格式</h5><p><code>pm &lt;command&gt;</code></p><p>pm命令实的实现方式在Pm.java，最后大多数都是调用PackageManagerService相应的方法来完成的。</p><h5 id="pm命令概览："><a href="#pm命令概览：" class="headerlink" title="pm命令概览："></a>pm命令概览：</h5><p><em>pm命令详情和翻译放在文末</em></p><table><thead><tr><th><strong>命令</strong></th><th><strong>功能</strong></th><th><strong>实现方法</strong></th></tr></thead><tbody><tr><td>list packages</td><td>列举app包信息</td><td>PMS.getInstalledPackages</td></tr><tr><td>install [options] <PATH></td><td>安装应用</td><td>PMS.installPackageAsUser</td></tr><tr><td>uninstall [options]<package></td><td>卸载应用</td><td>IPackageInstaller.uninstall</td></tr><tr><td>enable &lt;包名或组件名&gt;</td><td>enable</td><td>PMS.setEnabledSetting</td></tr><tr><td>disable &lt;包名或组件名&gt;</td><td>disable</td><td>PMS.setEnabledSetting</td></tr><tr><td>hide <package></td><td>隐藏应用</td><td>PMS.setApplicationHiddenSettingAsUser</td></tr><tr><td>unhide <package></td><td>显示应用</td><td>PMS.setApplicationHiddenSettingAsUser</td></tr><tr><td>get-install-location</td><td>获取安装位置</td><td>PMS.getInstallLocation</td></tr><tr><td>set-install-location</td><td>设置安装位置</td><td>PMS.setInstallLocation</td></tr><tr><td>path <package></td><td>查看App路径</td><td>PMS.getPackageInfo</td></tr><tr><td>clear <package></td><td>清空App数据</td><td>AMS.clearApplicationUserData</td></tr><tr><td>get-max-users</td><td>最大用户数</td><td>UserManager.getMaxSupportedUsers</td></tr><tr><td>force-dex-opt <package></td><td>dex优化</td><td>PMS.forceDexOpt</td></tr><tr><td>dump <package></td><td>dump信息</td><td>AM.dumpPackageStateStatic</td></tr><tr><td>trim-caches &lt;目标size&gt;</td><td>紧缩cache目标大小</td><td>PMS.freeStorageAndNotify</td></tr></tbody></table><h5 id="pm命令详情"><a href="#pm命令详情" class="headerlink" title="pm命令详情"></a>pm命令详情</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br></pre></td><td class="code"><pre><span class="line">$ pm -h                                                       </span><br><span class="line">Package manager (package) commands:</span><br><span class="line">  help</span><br><span class="line">    Print this help text.</span><br><span class="line"></span><br><span class="line">  path [--user USER_ID] PACKAGE</span><br><span class="line">    Print the path to the .apk of the given PACKAGE.</span><br><span class="line"></span><br><span class="line">  dump PACKAGE</span><br><span class="line">    Print various system state associated with the given PACKAGE.</span><br><span class="line"></span><br><span class="line">  has-feature FEATURE_NAME [version]</span><br><span class="line">    Prints true and returns exit status 0 when system has a FEATURE_NAME,</span><br><span class="line">    otherwise prints false and returns exit status 1</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 列出所有硬件相关信息</span><br><span class="line">  list features</span><br><span class="line">    Prints all features of the system.</span><br><span class="line">    </span><br><span class="line">  &#x2F;&#x2F; 列出所有的instrumentation测试包</span><br><span class="line">  list instrumentation [-f] [TARGET-PACKAGE]</span><br><span class="line">    Prints all test packages; optionally only those targeting TARGET-PACKAGE</span><br><span class="line">    Options:</span><br><span class="line">      -f: dump the name of the .apk file containing the test package</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 打印当前设备所支持的所有库</span><br><span class="line">  list libraries</span><br><span class="line">    Prints all system libraries.</span><br><span class="line">    </span><br><span class="line">  &#x2F;&#x2F; 包信息查询，可用参数如下：</span><br><span class="line">  list packages [-f] [-d] [-e] [-s] [-3] [-i] [-l] [-u] [-U] </span><br><span class="line">      [--show-versioncode] [--apex-only] [--uid UID] [--user USER_ID] [FILTER]</span><br><span class="line">    Prints all packages; optionally only those whose name contains</span><br><span class="line">    the text in FILTER.  Options are:</span><br><span class="line">      -f: see their associated file &#x2F;&#x2F;查看应用关联的文件信息。</span><br><span class="line">      -a: all known packages (but excluding APEXes) &#x2F;&#x2F;安装的所有包名，但不包括APEXes。</span><br><span class="line">      -d: filter to only show disabled packages  &#x2F;&#x2F;只显示已禁用的软件包</span><br><span class="line">      -e: filter to only show enabled packages&#x2F;&#x2F;只显示已启用的软件包</span><br><span class="line">      -s: filter to only show system packages&#x2F;&#x2F;只显示系统应用</span><br><span class="line">      -3: filter to only show third party packages&#x2F;&#x2F;只显示第三方应用</span><br><span class="line">      -i: see the installer for the packages&#x2F;&#x2F;显示应用安装来源</span><br><span class="line">      -l: ignored (used for compatibility with older releases) &#x2F;&#x2F;被忽略（用于与旧版本兼容）</span><br><span class="line">      -U: also show the package UID  &#x2F;&#x2F;显示包名并显示UID</span><br><span class="line">      -u: also include uninstalled packages &#x2F;&#x2F; 显示可卸载的软件包名</span><br><span class="line">      --show-versioncode: also show the version code &#x2F;&#x2F;显示包名和版本号</span><br><span class="line">      --apex-only: only show APEX packages  &#x2F;&#x2F;只显示APEX包名</span><br><span class="line">      --uid UID: filter to only show packages with the given UID &#x2F;&#x2F;显示指定UID的包名</span><br><span class="line">      --user USER_ID: only list packages belonging to the given user &#x2F;&#x2F;仅列出属于指定用户的软件包</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 权限组查询</span><br><span class="line">  list permission-groups</span><br><span class="line">    Prints all known permission groups.</span><br><span class="line">    </span><br><span class="line">  &#x2F;&#x2F; 打印权限</span><br><span class="line">  list permissions [-g] [-f] [-d] [-u] [GROUP]</span><br><span class="line">    Prints all known permissions; optionally only those in GROUP.  Options are:</span><br><span class="line">      -g: organize by group&#x2F;&#x2F;按组进行列出权限</span><br><span class="line">      -f: print all information&#x2F;&#x2F;打印所有信息</span><br><span class="line">      -s: short summary&#x2F;&#x2F;简短的摘要</span><br><span class="line">      -d: only list dangerous permissions&#x2F;&#x2F;只有危险的权限列表</span><br><span class="line">      -u: list only the permissions users will see&#x2F;&#x2F;只有权限的用户将看到列表</span><br><span class="line">用户自定义权限</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 打印进行中的会话</span><br><span class="line">  list staged-sessions [--only-ready] [--only-sessionid] [--only-parent]</span><br><span class="line">    Prints all staged sessions.</span><br><span class="line">      --only-ready: show only staged sessions that are ready  &#x2F;&#x2F;仅显示ready的会话</span><br><span class="line">      --only-sessionid: show only sessionId of each session  &#x2F;&#x2F;只显示会话的sessionid</span><br><span class="line">      --only-parent: hide all children sessions  &#x2F;&#x2F;隐藏所有子级会话</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 打印用户信息</span><br><span class="line">  list users</span><br><span class="line">    Prints all users.</span><br><span class="line"></span><br><span class="line">  resolve-activity [--brief] [--components] [--query-flags FLAGS]</span><br><span class="line">       [--user USER_ID] INTENT</span><br><span class="line">    Prints the activity that resolves to the given INTENT.</span><br><span class="line"></span><br><span class="line">  query-activities [--brief] [--components] [--query-flags FLAGS]</span><br><span class="line">       [--user USER_ID] INTENT</span><br><span class="line">    Prints all activities that can handle the given INTENT.</span><br><span class="line"></span><br><span class="line">  query-services [--brief] [--components] [--query-flags FLAGS]</span><br><span class="line">       [--user USER_ID] INTENT</span><br><span class="line">    Prints all services that can handle the given INTENT.</span><br><span class="line"></span><br><span class="line">  query-receivers [--brief] [--components] [--query-flags FLAGS]</span><br><span class="line">       [--user USER_ID] INTENT</span><br><span class="line">    Prints all broadcast receivers that can handle the given INTENT.</span><br><span class="line">  </span><br><span class="line">  &#x2F;&#x2F;通过指定路径安装apk到手机中(与adb install不同的是adb install安装的.apk是在你的电脑上，而pm install安装的apk是存储在你的手机中)</span><br><span class="line">  install [-rtfdgw] [-i PACKAGE] [--user USER_ID|all|current]</span><br><span class="line">       [-p INHERIT_PACKAGE] [--install-location 0&#x2F;1&#x2F;2]</span><br><span class="line">       [--install-reason 0&#x2F;1&#x2F;2&#x2F;3&#x2F;4] [--originating-uri URI]</span><br><span class="line">       [--referrer URI] [--abi ABI_NAME] [--force-sdk]</span><br><span class="line">       [--preload] [--instant] [--full] [--dont-kill]</span><br><span class="line">       [--enable-rollback]</span><br><span class="line">       [--force-uuid internal|UUID] [--pkg PACKAGE] [-S BYTES]</span><br><span class="line">       [--apex] [--wait TIMEOUT]</span><br><span class="line">       [PATH [SPLIT...]|-]</span><br><span class="line">    Install an application.  Must provide the apk data to install, either as</span><br><span class="line">    file path(s) or &#39;-&#39; to read from stdin.  Options are:</span><br><span class="line">      -R: disallow replacement of existing application &#x2F;&#x2F;禁止替换现有应用程序</span><br><span class="line">      -t: allow test packages&#x2F;&#x2F;运行测试包</span><br><span class="line">      -i: specify package name of installer owning the app  &#x2F;&#x2F;指定安装包的包名</span><br><span class="line">      -f: install application on internal flash &#x2F;&#x2F;在内部闪存上安装应用程序</span><br><span class="line">      -d: allow version code downgrade (debuggable packages only) &#x2F;&#x2F;运行降级安装</span><br><span class="line">      -p: partial application install (new split on top of existing pkg)</span><br><span class="line">      -g: grant all runtime permissions  &#x2F;&#x2F;授予所有运行权限</span><br><span class="line">      -S: size in bytes of package, required for stdin</span><br><span class="line">      --user: install under the given user.  &#x2F;&#x2F;指定用户安装</span><br><span class="line">      --dont-kill: installing a new feature split, don&#39;t kill running app &#x2F;&#x2F;不停止当前APP运行的情况下，安装新功能。</span><br><span class="line">      --restrict-permissions: don&#39;t whitelist restricted permissions at install &#x2F;&#x2F;安装时不将受限权限列入白名单</span><br><span class="line">      --originating-uri: set URI where app was downloaded from  &#x2F;&#x2F;设置APP下载的URI</span><br><span class="line">      --referrer: set URI that instigated the install of the app  &#x2F;&#x2F;设置应用安装的URI</span><br><span class="line">      --pkg: specify expected package name of app being installed</span><br><span class="line">      --abi: override the default ABI of the platform</span><br><span class="line">      --instant: cause the app to be installed as an ephemeral install app</span><br><span class="line">      --full: cause the app to be installed as a non-ephemeral full app</span><br><span class="line">      --install-location: force the install location:</span><br><span class="line">          0&#x3D;auto, 1&#x3D;internal only, 2&#x3D;prefer external</span><br><span class="line">      --install-reason: indicates why the app is being installed:</span><br><span class="line">          0&#x3D;unknown, 1&#x3D;admin policy, 2&#x3D;device restore,</span><br><span class="line">          3&#x3D;device setup, 4&#x3D;user request</span><br><span class="line">      --force-uuid: force install on to disk volume with given UUID</span><br><span class="line">      --apex: install an .apex file, not an .apk</span><br><span class="line">      --wait: when performing staged install, wait TIMEOUT milliseconds</span><br><span class="line">          for pre-reboot verification to complete. If TIMEOUT is not</span><br><span class="line">          specified it will wait for 60000 milliseconds. &#x2F;&#x2F;执行分阶段安装</span><br><span class="line"></span><br><span class="line">  install-existing [--user USER_ID|all|current]</span><br><span class="line">       [--instant] [--full] [--wait] [--restrict-permissions] PACKAGE</span><br><span class="line">    Installs an existing application for a new user.  Options are:</span><br><span class="line">      --user: install for the given user.</span><br><span class="line">      --instant: install as an instant app</span><br><span class="line">      --full: install as a full app</span><br><span class="line">      --wait: wait until the package is installed</span><br><span class="line">      --restrict-permissions: don&#39;t whitelist restricted permissions</span><br><span class="line"></span><br><span class="line">  install-create [-lrtsfdg] [-i PACKAGE] [--user USER_ID|all|current]</span><br><span class="line">       [-p INHERIT_PACKAGE] [--install-location 0&#x2F;1&#x2F;2]</span><br><span class="line">       [--install-reason 0&#x2F;1&#x2F;2&#x2F;3&#x2F;4] [--originating-uri URI]</span><br><span class="line">       [--referrer URI] [--abi ABI_NAME] [--force-sdk]</span><br><span class="line">       [--preload] [--instant] [--full] [--dont-kill]</span><br><span class="line">       [--force-uuid internal|UUID] [--pkg PACKAGE] [--apex] [-S BYTES]</span><br><span class="line">       [--multi-package] [--staged]</span><br><span class="line">    Like &quot;install&quot;, but starts an install session.  Use &quot;install-write&quot;</span><br><span class="line">    to push data into the session, and &quot;install-commit&quot; to finish.</span><br><span class="line"></span><br><span class="line">  install-write [-S BYTES] SESSION_ID SPLIT_NAME [PATH|-]</span><br><span class="line">    Write an apk into the given install session.  If the path is &#39;-&#39;, data</span><br><span class="line">    will be read from stdin.  Options are:</span><br><span class="line">      -S: size in bytes of package, required for stdin</span><br><span class="line"></span><br><span class="line">  install-remove SESSION_ID SPLIT...</span><br><span class="line">    Mark SPLIT(s) as removed in the given install session.</span><br><span class="line"></span><br><span class="line">  install-add-session MULTI_PACKAGE_SESSION_ID CHILD_SESSION_IDs</span><br><span class="line">    Add one or more session IDs to a multi-package session.</span><br><span class="line"></span><br><span class="line">  install-commit SESSION_ID</span><br><span class="line">    Commit the given active install session, installing the app.</span><br><span class="line"></span><br><span class="line">  install-abandon SESSION_ID</span><br><span class="line">    Delete the given active install session.</span><br><span class="line"></span><br><span class="line">  set-install-location LOCATION</span><br><span class="line">    Changes the default install location.  NOTE this is only intended for debugging;</span><br><span class="line">    using this can cause applications to break and other undersireable behavior.</span><br><span class="line">    LOCATION is one of:</span><br><span class="line">    0 [auto]: Let system decide the best location</span><br><span class="line">    1 [internal]: Install on internal device storage</span><br><span class="line">    2 [external]: Install on external media</span><br><span class="line"></span><br><span class="line">  get-install-location</span><br><span class="line">    Returns the current install location: 0, 1 or 2 as per set-install-location.</span><br><span class="line"></span><br><span class="line">  move-package PACKAGE [internal|UUID]</span><br><span class="line"></span><br><span class="line">  move-primary-storage [internal|UUID]</span><br><span class="line"></span><br><span class="line">  uninstall [-k] [--user USER_ID] [--versionCode VERSION_CODE]</span><br><span class="line">       PACKAGE [SPLIT...]</span><br><span class="line">    Remove the given package name from the system.  May remove an entire app</span><br><span class="line">    if no SPLIT names specified, otherwise will remove only the splits of the</span><br><span class="line">    given app.  Options are:</span><br><span class="line">      -k: keep the data and cache directories around after package removal.</span><br><span class="line">      --user: remove the app from the given user.</span><br><span class="line">      --versionCode: only uninstall if the app has the given version code.</span><br><span class="line"></span><br><span class="line">  clear [--user USER_ID] PACKAGE</span><br><span class="line">    Deletes all data associated with a package.</span><br><span class="line"></span><br><span class="line">  enable [--user USER_ID] PACKAGE_OR_COMPONENT</span><br><span class="line">  disable [--user USER_ID] PACKAGE_OR_COMPONENT</span><br><span class="line">  disable-user [--user USER_ID] PACKAGE_OR_COMPONENT</span><br><span class="line">  disable-until-used [--user USER_ID] PACKAGE_OR_COMPONENT</span><br><span class="line">  default-state [--user USER_ID] PACKAGE_OR_COMPONENT</span><br><span class="line">    These commands change the enabled state of a given package or</span><br><span class="line">    component (written as &quot;package&#x2F;class&quot;).</span><br><span class="line"></span><br><span class="line">  hide [--user USER_ID] PACKAGE_OR_COMPONENT</span><br><span class="line">  unhide [--user USER_ID] PACKAGE_OR_COMPONENT</span><br><span class="line"></span><br><span class="line">  suspend [--user USER_ID] TARGET-PACKAGE</span><br><span class="line">    Suspends the specified package (as user).</span><br><span class="line"></span><br><span class="line">  unsuspend [--user USER_ID] TARGET-PACKAGE</span><br><span class="line">    Unsuspends the specified package (as user).</span><br><span class="line"></span><br><span class="line">  grant [--user USER_ID] PACKAGE PERMISSION</span><br><span class="line">  revoke [--user USER_ID] PACKAGE PERMISSION</span><br><span class="line">    These commands either grant or revoke permissions to apps.  The permissions</span><br><span class="line">    must be declared as used in the app&#39;s manifest, be runtime permissions</span><br><span class="line">    (protection level dangerous), and the app targeting SDK greater than Lollipop MR1.</span><br><span class="line"></span><br><span class="line">  reset-permissions</span><br><span class="line">    Revert all runtime permissions to their default state.</span><br><span class="line"></span><br><span class="line">  set-permission-enforced PERMISSION [true|false]</span><br><span class="line"></span><br><span class="line">  get-privapp-permissions TARGET-PACKAGE</span><br><span class="line">    Prints all privileged permissions for a package.</span><br><span class="line"></span><br><span class="line">  get-privapp-deny-permissions TARGET-PACKAGE</span><br><span class="line">    Prints all privileged permissions that are denied for a package.</span><br><span class="line"></span><br><span class="line">  get-oem-permissions TARGET-PACKAGE</span><br><span class="line">    Prints all OEM permissions for a package.</span><br><span class="line"></span><br><span class="line">  set-app-link [--user USER_ID] PACKAGE &#123;always|ask|never|undefined&#125;</span><br><span class="line">  get-app-link [--user USER_ID] PACKAGE</span><br><span class="line"></span><br><span class="line">  trim-caches DESIRED_FREE_SPACE [internal|UUID]</span><br><span class="line">    Trim cache files to reach the given free space.</span><br><span class="line"></span><br><span class="line">  list users</span><br><span class="line">    Lists the current users.</span><br><span class="line"></span><br><span class="line">  create-user [--profileOf USER_ID] [--managed] [--restricted] [--ephemeral]</span><br><span class="line">      [--guest] [--pre-create-only] [--user-type USER_TYPE] USER_NAME</span><br><span class="line">    Create a new user with the given USER_NAME, printing the new user identifier</span><br><span class="line">    of the user.</span><br><span class="line">    USER_TYPE is the name of a user type, e.g. android.os.usertype.profile.MANAGED.</span><br><span class="line">      If not specified, the default user type is android.os.usertype.full.SECONDARY.</span><br><span class="line">      --managed is shorthand for &#39;--user-type android.os.usertype.profile.MANAGED&#39;.</span><br><span class="line">      --restricted is shorthand for &#39;--user-type android.os.usertype.full.RESTRICTED&#39;.</span><br><span class="line">      --guest is shorthand for &#39;--user-type android.os.usertype.full.GUEST&#39;.</span><br><span class="line"></span><br><span class="line">  remove-user USER_ID</span><br><span class="line">    Remove the user with the given USER_IDENTIFIER, deleting all data</span><br><span class="line">    associated with that user</span><br><span class="line"></span><br><span class="line">  set-user-restriction [--user USER_ID] RESTRICTION VALUE</span><br><span class="line"></span><br><span class="line">  get-max-users</span><br><span class="line"></span><br><span class="line">  get-max-running-users</span><br><span class="line"></span><br><span class="line">  compile [-m MODE | -r REASON] [-f] [-c] [--split SPLIT_NAME]</span><br><span class="line">          [--reset] [--check-prof (true | false)] (-a | TARGET-PACKAGE)</span><br><span class="line">    Trigger compilation of TARGET-PACKAGE or all packages if &quot;-a&quot;.  Options are:</span><br><span class="line">      -a: compile all packages</span><br><span class="line">      -c: clear profile data before compiling</span><br><span class="line">      -f: force compilation even if not needed</span><br><span class="line">      -m: select compilation mode</span><br><span class="line">          MODE is one of the dex2oat compiler filters:</span><br><span class="line">            assume-verified</span><br><span class="line">            extract</span><br><span class="line">            verify</span><br><span class="line">            quicken</span><br><span class="line">            space-profile</span><br><span class="line">            space</span><br><span class="line">            speed-profile</span><br><span class="line">            speed</span><br><span class="line">            everything</span><br><span class="line">      -r: select compilation reason</span><br><span class="line">          REASON is one of:</span><br><span class="line">            first-boot</span><br><span class="line">            boot</span><br><span class="line">            install</span><br><span class="line">            bg-dexopt</span><br><span class="line">            ab-ota</span><br><span class="line">            inactive</span><br><span class="line">            shared</span><br><span class="line">      --reset: restore package to its post-install state</span><br><span class="line">      --check-prof (true | false): look at profiles when doing dexopt?</span><br><span class="line">      --secondary-dex: compile app secondary dex files</span><br><span class="line">      --split SPLIT: compile only the given split name</span><br><span class="line">      --compile-layouts: compile layout resources for faster inflation</span><br><span class="line"></span><br><span class="line">  force-dex-opt PACKAGE</span><br><span class="line">    Force immediate execution of dex opt for the given PACKAGE.</span><br><span class="line"></span><br><span class="line">  bg-dexopt-job</span><br><span class="line">    Execute the background optimizations immediately.</span><br><span class="line">    Note that the command only runs the background optimizer logic. It may</span><br><span class="line">    overlap with the actual job but the job scheduler will not be able to</span><br><span class="line">    cancel it. It will also run even if the device is not in the idle</span><br><span class="line">    maintenance mode.</span><br><span class="line"></span><br><span class="line">  reconcile-secondary-dex-files TARGET-PACKAGE</span><br><span class="line">    Reconciles the package secondary dex files with the generated oat files.</span><br><span class="line"></span><br><span class="line">  dump-profiles TARGET-PACKAGE</span><br><span class="line">    Dumps method&#x2F;class profile files to</span><br><span class="line">    &#x2F;data&#x2F;misc&#x2F;profman&#x2F;TARGET-PACKAGE.txt</span><br><span class="line"></span><br><span class="line">  snapshot-profile TARGET-PACKAGE [--code-path path]</span><br><span class="line">    Take a snapshot of the package profiles to</span><br><span class="line">    &#x2F;data&#x2F;misc&#x2F;profman&#x2F;TARGET-PACKAGE[-code-path].prof</span><br><span class="line">    If TARGET-PACKAGE&#x3D;android it will take a snapshot of the boot image</span><br><span class="line"></span><br><span class="line">  set-home-activity [--user USER_ID] TARGET-COMPONENT</span><br><span class="line">    Set the default home activity (aka launcher).</span><br><span class="line">    TARGET-COMPONENT can be a package name (com.package.my) or a full</span><br><span class="line">    component (com.package.my&#x2F;component.name). However, only the package name</span><br><span class="line">    matters: the actual component used will be determined automatically from</span><br><span class="line">    the package.</span><br><span class="line"></span><br><span class="line">  set-installer PACKAGE INSTALLER</span><br><span class="line">    Set installer package name</span><br><span class="line"></span><br><span class="line">  get-instantapp-resolver</span><br><span class="line">    Return the name of the component that is the current instant app installer.</span><br><span class="line"></span><br><span class="line">  set-harmful-app-warning [--user &lt;USER_ID&gt;] &lt;PACKAGE&gt; [&lt;WARNING&gt;]</span><br><span class="line">    Mark the app as harmful with the given warning message.</span><br><span class="line"></span><br><span class="line">  get-harmful-app-warning [--user &lt;USER_ID&gt;] &lt;PACKAGE&gt;</span><br><span class="line">    Return the harmful app warning message for the given app, if present</span><br><span class="line"></span><br><span class="line">  uninstall-system-updates [&lt;PACKAGE&gt;]</span><br><span class="line">    Removes updates to the given system application and falls back to its</span><br><span class="line">    &#x2F;system version. Does nothing if the given package is not a system app.</span><br><span class="line">    If no package is specified, removes updates to all system applications.</span><br><span class="line"></span><br><span class="line">  get-moduleinfo [--all | --installed] [module-name]</span><br><span class="line">    Displays module info. If module-name is specified only that info is shown</span><br><span class="line">    By default, without any argument only installed modules are shown.</span><br><span class="line">      --all: show all module info</span><br><span class="line">      --installed: show only installed modules</span><br><span class="line"></span><br><span class="line">  log-visibility [--enable|--disable] &lt;PACKAGE&gt;</span><br><span class="line">    Turns on debug logging when visibility is blocked for the given package.</span><br><span class="line">      --enable: turn on debug logging (default)</span><br><span class="line">      --disable: turn off debug logging</span><br><span class="line"></span><br><span class="line">&lt;INTENT&gt; specifications include these flags and arguments:</span><br><span class="line">    [-a &lt;ACTION&gt;] [-d &lt;DATA_URI&gt;] [-t &lt;MIME_TYPE&gt;] [-i &lt;IDENTIFIER&gt;]</span><br><span class="line">    [-c &lt;CATEGORY&gt; [-c &lt;CATEGORY&gt;] ...]</span><br><span class="line">    [-n &lt;COMPONENT_NAME&gt;]</span><br><span class="line">    [-e|--es &lt;EXTRA_KEY&gt; &lt;EXTRA_STRING_VALUE&gt; ...]</span><br><span class="line">    [--esn &lt;EXTRA_KEY&gt; ...]</span><br><span class="line">    [--ez &lt;EXTRA_KEY&gt; &lt;EXTRA_BOOLEAN_VALUE&gt; ...]</span><br><span class="line">    [--ei &lt;EXTRA_KEY&gt; &lt;EXTRA_INT_VALUE&gt; ...]</span><br><span class="line">    [--el &lt;EXTRA_KEY&gt; &lt;EXTRA_LONG_VALUE&gt; ...]</span><br><span class="line">    [--ef &lt;EXTRA_KEY&gt; &lt;EXTRA_FLOAT_VALUE&gt; ...]</span><br><span class="line">    [--eu &lt;EXTRA_KEY&gt; &lt;EXTRA_URI_VALUE&gt; ...]</span><br><span class="line">    [--ecn &lt;EXTRA_KEY&gt; &lt;EXTRA_COMPONENT_NAME_VALUE&gt;]</span><br><span class="line">    [--eia &lt;EXTRA_KEY&gt; &lt;EXTRA_INT_VALUE&gt;[,&lt;EXTRA_INT_VALUE...]]</span><br><span class="line">        (mutiple extras passed as Integer[])</span><br><span class="line">    [--eial &lt;EXTRA_KEY&gt; &lt;EXTRA_INT_VALUE&gt;[,&lt;EXTRA_INT_VALUE...]]</span><br><span class="line">        (mutiple extras passed as List&lt;Integer&gt;)</span><br><span class="line">    [--ela &lt;EXTRA_KEY&gt; &lt;EXTRA_LONG_VALUE&gt;[,&lt;EXTRA_LONG_VALUE...]]</span><br><span class="line">        (mutiple extras passed as Long[])</span><br><span class="line">    [--elal &lt;EXTRA_KEY&gt; &lt;EXTRA_LONG_VALUE&gt;[,&lt;EXTRA_LONG_VALUE...]]</span><br><span class="line">        (mutiple extras passed as List&lt;Long&gt;)</span><br><span class="line">    [--efa &lt;EXTRA_KEY&gt; &lt;EXTRA_FLOAT_VALUE&gt;[,&lt;EXTRA_FLOAT_VALUE...]]</span><br><span class="line">        (mutiple extras passed as Float[])</span><br><span class="line">    [--efal &lt;EXTRA_KEY&gt; &lt;EXTRA_FLOAT_VALUE&gt;[,&lt;EXTRA_FLOAT_VALUE...]]</span><br><span class="line">        (mutiple extras passed as List&lt;Float&gt;)</span><br><span class="line">    [--esa &lt;EXTRA_KEY&gt; &lt;EXTRA_STRING_VALUE&gt;[,&lt;EXTRA_STRING_VALUE...]]</span><br><span class="line">        (mutiple extras passed as String[]; to embed a comma into a string,</span><br><span class="line">         escape it using &quot;\,&quot;)</span><br><span class="line">    [--esal &lt;EXTRA_KEY&gt; &lt;EXTRA_STRING_VALUE&gt;[,&lt;EXTRA_STRING_VALUE...]]</span><br><span class="line">        (mutiple extras passed as List&lt;String&gt;; to embed a comma into a string,</span><br><span class="line">         escape it using &quot;\,&quot;)</span><br><span class="line">    [-f &lt;FLAG&gt;]</span><br><span class="line">    [--grant-read-uri-permission] [--grant-write-uri-permission]</span><br><span class="line">    [--grant-persistable-uri-permission] [--grant-prefix-uri-permission]</span><br><span class="line">    [--debug-log-resolution] [--exclude-stopped-packages]</span><br><span class="line">    [--include-stopped-packages]</span><br><span class="line">    [--activity-brought-to-front] [--activity-clear-top]</span><br><span class="line">    [--activity-clear-when-task-reset] [--activity-exclude-from-recents]</span><br><span class="line">    [--activity-launched-from-history] [--activity-multiple-task]</span><br><span class="line">    [--activity-no-animation] [--activity-no-history]</span><br><span class="line">    [--activity-no-user-action] [--activity-previous-is-top]</span><br><span class="line">    [--activity-reorder-to-front] [--activity-reset-task-if-needed]</span><br><span class="line">    [--activity-single-top] [--activity-clear-task]</span><br><span class="line">    [--activity-task-on-home] [--activity-match-external]</span><br><span class="line">    [--receiver-registered-only] [--receiver-replace-pending]</span><br><span class="line">    [--receiver-foreground] [--receiver-no-abort]</span><br><span class="line">    [--receiver-include-background]</span><br><span class="line">    [--selector]</span><br><span class="line">    [&lt;URI&gt; | &lt;PACKAGE&gt; | &lt;COMPONENT&gt;]</span><br></pre></td></tr></table></figure><p>名词解释：</p><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjUwMjQ0L2FydGljbGUvZGV0YWlscy8xMDQxOTM5Nzc=">APEX<i class="fa fa-external-link-alt"></i></span>(Android Pony EXpress ) 是Google在Android 10中引进的一种用于管理较低级别系统模块的安装包管理器，用来更新一些不适用APK安装流程的系统组件，比如Bionic 、libnativebridge、libnativehelper、libnativeloader以及一些运行时类库。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;​        pm命令 为包管理（package manager）的简称，是Android开发与测试后过程中必不可少的命令，可以使用pm命令来执行应用的安装和查询应用信息、系统权限以及控制应用。&lt;/p&gt;</summary>
    
    
    
    <category term="Android" scheme="https://www.lauyongyi.cn/categories/Android/"/>
    
    
    <category term="adb命令" scheme="https://www.lauyongyi.cn/tags/adb%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Crash详解</title>
    <link href="https://www.lauyongyi.cn/Crash%E8%AF%A6%E8%A7%A3.html"/>
    <id>https://www.lauyongyi.cn/Crash%E8%AF%A6%E8%A7%A3.html</id>
    <published>2021-05-10T13:59:00.000Z</published>
    <updated>2020-05-10T14:14:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Android APP Crash通常是由未捕获的<code>Exception</code>或<code>signal</code>引起<code>app</code>异常退出。</p><a id="more"></a><p>如果<code>app</code>使用<code>Java</code>语言编写，那么，当<code>Throwable</code>抛出未处理的异常时，此时就会引起 <code>app Crash</code>。</p><p>如果app 使用<code>native-code</code>编写，那么，当执行时遇到未处理的<code>signal</code>（例如<code>SIGSEGV</code>）时，<code>app</code>就会 <code>Crash</code>并退出。</p><p>当应用程序崩溃时，<code>Android</code>终止应用程序的进程并显示一个对话框，让用户知道应用程序已经停止。如下图。</p><p><img src="/images/2021/05/crash-example-framed.png"></p><p><code>App Crash</code> 不仅发生在前台进程，任何<code>app</code>组件，例如<code>Broadcast Receivers</code>,<code>Content Providers</code>,<code>Service</code>等在后台运行的组件，也可以引起<code>App Crash</code>。这些<code>Crash</code>很容易引起用户混淆，因为他们没有直接参与到你的<code>app</code>中。</p><h5 id="分析App-Crash"><a href="#分析App-Crash" class="headerlink" title="分析App Crash"></a>分析App Crash</h5><p>解决崩溃可能很困难。 但是，如果您能够确定崩溃的根本原因，则很可能可以找到解决方案。</p><p>有很多情况可能会导致应用程序崩溃。 一些原因是显而易见的，比如检查一个空值或空字符串，而另外一些更微妙，比如将无效参数传递给API甚至是复杂的多线程交互。</p><h6 id="读取堆栈信息"><a href="#读取堆栈信息" class="headerlink" title="读取堆栈信息"></a>读取堆栈信息</h6><p>解决App Crash，首先要找到在那些代码发生的。你可以通过<code>logcat</code>或者收集工具如<em>play Console</em>，<em>bugly</em>等输出的堆栈信息进行分析查看。</p><p>下面是一个Crash示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">--------- beginning of crash</span><br><span class="line">    AndroidRuntime: FATAL EXCEPTION: main</span><br><span class="line">    Process: com.android.developer.crashsample, PID: <span class="number">3686</span></span><br><span class="line">    java.lang.NullPointerException: crash sample</span><br><span class="line">    at com.android.developer.crashsample.MainActivity$<span class="number">1.</span>onClick(MainActivity.java:<span class="number">27</span>)</span><br><span class="line">    at android.view.View.performClick(View.java:<span class="number">6134</span>)</span><br><span class="line">    at android.view.View$PerformClick.run(View.java:<span class="number">23965</span>)</span><br><span class="line">    at android.os.Handler.handleCallback(Handler.java:<span class="number">751</span>)</span><br><span class="line">    at android.os.Handler.dispatchMessage(Handler.java:<span class="number">95</span>)</span><br><span class="line">    at android.os.Looper.loop(Looper.java:<span class="number">156</span>)</span><br><span class="line">    at android.app.ActivityThread.main(ActivityThread.java:<span class="number">6440</span>)</span><br><span class="line">    at java.lang.reflect.Method.invoke(Native Method)</span><br><span class="line">    at com.android.internal.os.Zygote$MethodAndArgsCaller.run(Zygote.java:<span class="number">240</span>)</span><br><span class="line">    at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:<span class="number">746</span>)</span><br><span class="line">    --------- beginning of system</span><br></pre></td></tr></table></figure><p>上述Crash 堆栈信息包含 以下信息</p><ul><li>1.Crash app 包名</li><li>2.Crash app PID</li><li>3.引起Crash的异常信息（此异常时引起Crash的重要原因）</li><li>4.引起Crash 的代码位置，行号，哪个函数调用等等</li><li>5.对于被调用的每个函数，另一行显示前面的调用站点（称为栈帧）。</li></ul><p>通过走栈和检查代码，你可能会发现一个地方传递了一个不正确的值。 如果您的代码没有出现在堆栈跟踪中，则可能是在某处将异常操作传递给了一个无效的参数。 您可以经常通过检查堆栈跟踪的每一行，找到您使用的任何API类，并确认您传递的参数是正确的，并且从允许的地方调用该类来判断发生了什么。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Android APP Crash通常是由未捕获的&lt;code&gt;Exception&lt;/code&gt;或&lt;code&gt;signal&lt;/code&gt;引起&lt;code&gt;app&lt;/code&gt;异常退出。&lt;/p&gt;</summary>
    
    
    
    <category term="Android" scheme="https://www.lauyongyi.cn/categories/Android/"/>
    
    
    <category term="Android开发" scheme="https://www.lauyongyi.cn/tags/Android%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Android Uiantomator2.0脚本编写基础知识</title>
    <link href="https://www.lauyongyi.cn/Android%20Uiantomator2.0%E8%84%9A%E6%9C%AC%E7%BC%96%E5%86%99%E5%9F%BA%E7%A1%80.html"/>
    <id>https://www.lauyongyi.cn/Android%20Uiantomator2.0%E8%84%9A%E6%9C%AC%E7%BC%96%E5%86%99%E5%9F%BA%E7%A1%80.html</id>
    <published>2021-03-10T12:16:00.000Z</published>
    <updated>2021-06-18T10:33:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vdHJhaW5pbmcvdGVzdGluZy91aS1hdXRvbWF0b3IuaHRtbA==">UiAutomator<i class="fa fa-external-link-alt"></i></span>是Google提供的用来做安卓自动化测试的一个Java库，基于Accessibility服务。功能很强，可以对第三方App进行测试，获取屏幕上任意一个APP的任意一个控件属性，并对其进行任意操作，但有两个缺点：1. 测试脚本只能使用Java语言 2. 测试脚本要打包成jar或者apk包上传到设备上才能运行。        </p><a id="more"></a><h4 id="UiautomatorViewer工具"><a href="#UiautomatorViewer工具" class="headerlink" title="UiautomatorViewer工具"></a>UiautomatorViewer工具</h4><p>​        uiautomatorviewer是android SDK自带的一个元素定位工具。通过截屏并分析XML布局文件的方式，为用户提供控件信息查看服务。<br>使用uiautomatorviewer，你可以检查一个应用的UI来查看应用的布局和组件以及相关的属性。该工具位于SDK目录下的tools\bin子目录下。</p><h5 id="启动UiUiautomatorViewer"><a href="#启动UiUiautomatorViewer" class="headerlink" title="启动UiUiautomatorViewer"></a>启动UiUiautomatorViewer</h5><p>​    方法一：直接进入进入SDK目录下的tools\bin目录下双击uiautomatorviewer.bat就可以启动。（旧版本的在SDK目录下的tools）</p><p>​    方法二：将环境变量配置到SDK目录下的tools\bin目录，在命令行工具执行：uiautomatorviewer</p><h4 id="核心定位元素"><a href="#核心定位元素" class="headerlink" title="核心定位元素"></a>核心定位元素</h4><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>resource-id</td><td>资源ID，需要操作的组件基本都会有ID</td></tr><tr><td>text</td><td>文字属性，显示在组件上的文字</td></tr><tr><td>content-desc</td><td>描述，常用于提示操作</td></tr><tr><td>checken</td><td>选择属性，常见开关、单/复选和开关状态</td></tr><tr><td>focused</td><td>焦点属性，如输入框光标的闪动，说明焦点在输入框</td></tr></tbody></table><h4 id="搜索对象"><a href="#搜索对象" class="headerlink" title="搜索对象"></a>搜索对象</h4><table><thead><tr><th>属性</th><th>返回值</th><th>API By类</th></tr></thead><tbody><tr><td>resource-id</td><td>static BySelector</td><td>res(java.lang.String resourceName)</td></tr><tr><td>text</td><td>static BySelector</td><td>text(java.lang.String text)</td></tr><tr><td>content-desc</td><td>static BySelector</td><td>decs(java.lang.String contentDescription)</td></tr><tr><td>checken</td><td>static BySelector</td><td>checked(boolean isChecked)</td></tr><tr><td>focused</td><td>static BySelector</td><td>focused(boolean isFocused)</td></tr></tbody></table><h4 id="常见组件操作"><a href="#常见组件操作" class="headerlink" title="常见组件操作"></a>常见组件操作</h4><table><thead><tr><th>常见组件操作</th><th>类（UiObject2）</th></tr></thead><tbody><tr><td>点击</td><td>public boolean click()</td></tr><tr><td>长按</td><td>public boolean longclick()</td></tr><tr><td>拖动</td><td>public void drag(Point dest)</td></tr><tr><td>输入</td><td>public boolean setText(String text)</td></tr></tbody></table><h4 id="常见设备操作"><a href="#常见设备操作" class="headerlink" title="常见设备操作"></a>常见设备操作</h4><table><thead><tr><th>常见设备操作</th><th>类（UiDevice）</th></tr></thead><tbody><tr><td>点击</td><td>click(int x, int y)</td></tr><tr><td>按键</td><td>pressKeyCode(int KeyCode)</td></tr><tr><td>滑动</td><td>swipe(int startX, int StartY, int endX, int endY, int steps)</td></tr></tbody></table><p>1个steps等于5ms。</p><h4 id="用例注释生命周期"><a href="#用例注释生命周期" class="headerlink" title="用例注释生命周期"></a>用例注释生命周期</h4><p>@Before  每次用例开始前都执行</p><p>@Test 测试用例 </p><p>@After 每次用例结束后都执行</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vdHJhaW5pbmcvdGVzdGluZy91aS1hdXRvbWF0b3IuaHRtbA==&quot;&gt;UiAutomator&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;是Google提供的用来做安卓自动化测试的一个Java库，基于Accessibility服务。功能很强，可以对第三方App进行测试，获取屏幕上任意一个APP的任意一个控件属性，并对其进行任意操作，但有两个缺点：1. 测试脚本只能使用Java语言 2. 测试脚本要打包成jar或者apk包上传到设备上才能运行。        &lt;/p&gt;</summary>
    
    
    
    <category term="Android" scheme="https://www.lauyongyi.cn/categories/Android/"/>
    
    
    <category term="Android开发" scheme="https://www.lauyongyi.cn/tags/Android%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>安卓shell脚本</title>
    <link href="https://www.lauyongyi.cn/%E5%AE%89%E5%8D%93Shell%E8%84%9A%E6%9C%AC.html"/>
    <id>https://www.lauyongyi.cn/%E5%AE%89%E5%8D%93Shell%E8%84%9A%E6%9C%AC.html</id>
    <published>2021-02-15T09:30:00.000Z</published>
    <updated>2021-02-16T06:39:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>​        在做测试Android应用时，经常需要执行某些重复的操作，如果设备支持adb调试，可以使用python、java等编写自动化脚本，以实现自动执行重复操作，解放人力。但如果遇到不支持ADB调试的设备时，只能使用串口工具，此时python、java就显得些乏力，这时候，就可以使用shell脚本。<a id="more"></a></p><p>1、脚本编写</p><p>​        安卓的shell脚本编写和Linux系统一样。但因为机制原因，要执行shell脚本，需要到/data目录下才可以。</p><p>​        使用串口工具链接设备和电脑。</p><p>​        选择端口</p><p>​        进入到设备</p><p>​        su获取权限</p><p>​        cd /data 进入到data目录</p><p>​        vi shellscript.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">示例脚本。模拟打开一个应用，然后发送指定键值进行操作</span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/system/bin/sh</span></span><br><span class="line">while true</span><br><span class="line">do</span><br><span class="line">&#123;</span><br><span class="line">am start PackageName</span><br><span class="line">input keyevent KeyCode</span><br><span class="line">input keyevent KeyCode</span><br><span class="line">input keyevent KeyCode</span><br><span class="line">sleep 3</span><br><span class="line">am force-stop PackageName</span><br><span class="line">&#125;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>​        按 Esc  #进入vi命令模式</p><p>​        输入 :wq  #写入并退出</p><p>​        chmod 777 shellscript.sh   #赋予权限</p><p>​        ./shellscript.sh  #执行脚本</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;​        在做测试Android应用时，经常需要执行某些重复的操作，如果设备支持adb调试，可以使用python、java等编写自动化脚本，以实现自动执行重复操作，解放人力。但如果遇到不支持ADB调试的设备时，只能使用串口工具，此时python、java就显得些乏力，这时候，就可以使用shell脚本。</summary>
    
    
    
    <category term="Android" scheme="https://www.lauyongyi.cn/categories/Android/"/>
    
    
    <category term="adb命令" scheme="https://www.lauyongyi.cn/tags/adb%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Centos安装Tomcat</title>
    <link href="https://www.lauyongyi.cn/Centos%E5%AE%89%E8%A3%85Tomcat.html"/>
    <id>https://www.lauyongyi.cn/Centos%E5%AE%89%E8%A3%85Tomcat.html</id>
    <published>2021-01-22T05:02:00.000Z</published>
    <updated>2021-01-22T05:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>​    记录centos安装Tomcat的方法和配置过程<a id="more"></a></p><p>前提条件：已经配置好jdk环境</p><h4 id="方法一：yum"><a href="#方法一：yum" class="headerlink" title="方法一：yum"></a>方法一：yum</h4><p>​    可以直接使用 <code> yum -y install tomcat</code> 进行安装</p><p>优点：</p><p>​    省事</p><p>缺点：</p><p>​    不一定是最新版本</p><p>安装成功后，需要配置防火墙</p><p><code>firewall-cmd --zone=public --add-port=8080/tcp --permanent</code> 进行8080端口开放配置；</p><p>如果没有出现 <strong>success</strong> （一般都是提示防火墙没有运行） ，就需要检查防火墙是否开启</p><p>防火墙开启命令 <code>systemctl start firewalld</code> ，防火墙开启之后，在进行配置，然后重启防火墙，命令如下</p><p><code>firewall-cmd --reload</code>。防火墙重启之后，就可以通过IP:8080进行访问了。</p><p>通常，这个时候访问，提示无法访问，原因是缺少管理包，执行以下命令，安装成功之后，就可以正常访问了。</p><p><code>yum install -y tomcat-webapps tomcat-admin-webapps </code></p><p>Tomcat相关的操作命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">查看tomcat的状态</span><br><span class="line">systemctl status tomcat.service</span><br><span class="line"></span><br><span class="line">配置开机启动</span><br><span class="line">systemctl enable tomcat.service</span><br><span class="line"></span><br><span class="line">删除开机启动</span><br><span class="line">systemctl disable tomcat.service</span><br><span class="line"></span><br><span class="line">启动tomcat</span><br><span class="line">systemctl start tomcat.service</span><br><span class="line"></span><br><span class="line">停止tomcat</span><br><span class="line">systemctl stop tomcat.service</span><br><span class="line"></span><br><span class="line">重启tomcat</span><br><span class="line">systemctl restart tomcat.service</span><br></pre></td></tr></table></figure><p>关于安装目录说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">相关目录及作用说明</span><br><span class="line">　　&#x2F;etc&#x2F;tomcatXX - 全局配置</span><br><span class="line">　　&#x2F;usr&#x2F;share&#x2F;tomcatXX&#x2F; - 程序主目录</span><br><span class="line">　　&#x2F;usr&#x2F;share&#x2F;tomcatXX&#x2F;conf&#x2F;Catalina&#x2F;localhost&#x2F; - 本机部署的 Catalina 配置</span><br><span class="line">　　&#x2F;var&#x2F;lib&#x2F;tomcatXX&#x2F; - 工作主目录</span><br><span class="line">　　&#x2F;var&#x2F;lib&#x2F;tomcatXX&#x2F;webapps - （应用文件实际存放于此）</span><br></pre></td></tr></table></figure><h4 id="方法二：手动安装配置"><a href="#方法二：手动安装配置" class="headerlink" title="方法二：手动安装配置"></a>方法二：手动安装配置</h4><p>​    进入到一个目录下例如 <strong>cd /usr/local/</strong> ，然后执行下载命令</p><p><code>wget http://mirrors.hust.edu.cn/apache/tomcat/tomcat-9/v9.0.41/bin/apache-tomcat-9.0.41.tar.gz </code> 这里用的是9.0版本，可以自己调整版本。</p><p>然后解压 <code>tar -zxvf apache-tomcat-9.0.41.tar.gz</code></p><p>重命名 <code>mv apache-tomcat-9.0.41 tomcat</code></p><p>然后启动就可以了</p><p> tomcat常用命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;bin&#x2F;startup.sh(启动命令)</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;bin&#x2F;shutdown.sh(关闭命令)</span><br><span class="line">ps -ef|grep java(查看tomcat进程)</span><br><span class="line">kill -9 进程号(杀死经常)</span><br><span class="line">tail -f &#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;logs&#x2F;catalina.out(查看tomcat日志)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;​    记录centos安装Tomcat的方法和配置过程</summary>
    
    
    
    <category term="工具使用" scheme="https://www.lauyongyi.cn/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
    
    <category term="Linux" scheme="https://www.lauyongyi.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>python基础--列表、字符串、字典、元组之间的转换</title>
    <link href="https://www.lauyongyi.cn/python%E5%9F%BA%E7%A1%80--%E5%88%97%E8%A1%A8%E3%80%81%E5%85%83%E7%BB%84%E7%AD%89%E8%BD%AC%E6%8D%A2.html"/>
    <id>https://www.lauyongyi.cn/python%E5%9F%BA%E7%A1%80--%E5%88%97%E8%A1%A8%E3%80%81%E5%85%83%E7%BB%84%E7%AD%89%E8%BD%AC%E6%8D%A2.html</id>
    <published>2021-01-05T08:14:00.000Z</published>
    <updated>2021-01-14T06:08:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="列表与字符串的相互转换"><a href="#列表与字符串的相互转换" class="headerlink" title="列表与字符串的相互转换"></a>列表与字符串的相互转换</h4><h5 id="列表转字符串"><a href="#列表转字符串" class="headerlink" title="列表转字符串"></a>列表转字符串</h5><p>将列表中的元素用特定的符号连接成一个字符串：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list1 = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str1 = <span class="string">&#x27;&#x27;</span>.join(list1)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str1</span><br><span class="line"><span class="string">&#x27;abc&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str2 = <span class="string">&#x27;-&#x27;</span>.join(list1)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str2</span><br><span class="line"><span class="string">&#x27;a-b-c&#x27;</span></span><br></pre></td></tr></table></figure><a id="more"></a>列表中如果包含有其它元素，可以采用以下形式<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list3 = [<span class="string">&#x27;a&#x27;</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;b&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str3 = [str(i) <span class="keyword">for</span> i <span class="keyword">in</span> list3]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str3</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list4 = [<span class="string">&#x27;a&#x27;</span>,<span class="number">1</span>,[<span class="string">&#x27;e&#x27;</span>,<span class="number">9</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str4 = [str(i) <span class="keyword">for</span> i <span class="keyword">in</span> list4]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str4</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&quot;[&#x27;e&#x27;, 9]&quot;</span>]</span><br></pre></td></tr></table></figure><p>上面的方法，在列表中包含有其它列表类型的元素时，可能需要脱去列表最外层的中括号，才能在实际业务中应用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list1 = [<span class="string">&#x27;a&#x27;</span>,<span class="number">7</span>,<span class="string">&#x27;b&#x27;</span>,<span class="number">8</span>,<span class="string">&#x27;c&#x27;</span>,[<span class="string">&#x27;e&#x27;</span>,<span class="number">9</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str1 = str(list1)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str1</span><br><span class="line"><span class="string">&quot;[&#x27;a&#x27;, 7, &#x27;b&#x27;, 8, &#x27;c&#x27;, [&#x27;e&#x27;, 9]]&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str2 = str1[<span class="number">1</span>:<span class="number">-1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str2</span><br><span class="line"><span class="string">&quot;&#x27;a&#x27;, 7, &#x27;b&#x27;, 8, &#x27;c&#x27;, [&#x27;e&#x27;, 9]&quot;</span></span><br></pre></td></tr></table></figure><h5 id="字符串转列表"><a href="#字符串转列表" class="headerlink" title="字符串转列表"></a>字符串转列表</h5><p>如果字符串没有额外分隔符，可以用直接用list转换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>str1 = <span class="string">&#x27;abcde&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list1 = list(str1)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list1</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>]</span><br></pre></td></tr></table></figure><p>若字符串中同样的分隔符重复出现，则用分割法返回列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>str1 = <span class="string">&#x27;a,b,c,d,e&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list1 = str1.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list1</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>]</span><br></pre></td></tr></table></figure><p>若字符串中是列表的形式，可获取字符串内容，从而得到列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>str1 = <span class="string">&quot;[&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;]&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list1 = eval(str1)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list1</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br></pre></td></tr></table></figure><h4 id="列表与字典的相互转换"><a href="#列表与字典的相互转换" class="headerlink" title="列表与字典的相互转换"></a>列表与字典的相互转换</h4><h5 id="列表转字典"><a href="#列表转字典" class="headerlink" title="列表转字典"></a>列表转字典</h5><p>两个列表一一对应，分别表示key和value</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>key1= [<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>val1=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict1 = dict(zip(key1,val1))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict1</span><br><span class="line">&#123;<span class="string">&#x27;1&#x27;</span>: <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;2&#x27;</span>: <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;3&#x27;</span>: <span class="string">&#x27;c&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>key1 = [<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>val1 = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>zip(key1,val1)</span><br><span class="line">&lt;zip object at <span class="number">0x000001A6162E1380</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(zip(key1,val1))</span><br><span class="line">[(<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;a&#x27;</span>), (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;b&#x27;</span>), (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;c&#x27;</span>)]</span><br></pre></td></tr></table></figure><p>zip 函数其实就是将两个列表一一对应的元素放到一起，结果为[(‘1’, ‘a’), (‘2’ ,‘b’), (‘3’, ‘c’)]，python3为了节省内存压缩成一个对象，通过list转换可以看到实际的结果。</p><h5 id="嵌套列表转字典"><a href="#嵌套列表转字典" class="headerlink" title="嵌套列表转字典"></a>嵌套列表转字典</h5><p>列表中的元素均为列表，其中的每一个列表都是一对key-value。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list1 = [[<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;a&#x27;</span>], [<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;b&#x27;</span>], [<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dic1 = dict(list1)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dic1</span><br><span class="line">&#123;<span class="string">&#x27;1&#x27;</span>: <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;2&#x27;</span>: <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;3&#x27;</span>: <span class="string">&#x27;c&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><h5 id="字典转列表"><a href="#字典转列表" class="headerlink" title="字典转列表"></a>字典转列表</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dic1 = &#123;<span class="string">&#x27;1&#x27;</span>: <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;2&#x27;</span>: <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;3&#x27;</span>: <span class="string">&#x27;c&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(dic1)</span><br><span class="line">[<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(dic1.keys())</span><br><span class="line">[<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(dic1.values())</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dic1.keys()</span><br><span class="line">dict_keys([<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dic1.values()</span><br><span class="line">dict_values([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>])</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h4 id="字典与字符串的相互转换"><a href="#字典与字符串的相互转换" class="headerlink" title="字典与字符串的相互转换"></a>字典与字符串的相互转换</h4><h5 id="字符串转字典"><a href="#字符串转字典" class="headerlink" title="字符串转字典"></a>字符串转字典</h5><p>字符串内容是字典，则用 <strong>eval</strong> 获取字符串内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>str1 = <span class="string">&quot;&#123;&#x27;1&#x27;: &#x27;a&#x27;, &#x27;2&#x27;: &#x27;b&#x27;, &#x27;3&#x27;: &#x27;c&#x27;&#125;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>eval(str1)</span><br><span class="line">&#123;<span class="string">&#x27;1&#x27;</span>: <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;2&#x27;</span>: <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;3&#x27;</span>: <span class="string">&#x27;c&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><p>还有一种方法是用 <strong>json</strong> 包中的函数，将json格式字符串转为字典。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> json</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str1 = <span class="string">&#x27;&#123;&quot;a&quot;:1,&quot;b&quot;:2&#125;&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>json.loads(str1)</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>&#125;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h5 id="字典转字符串"><a href="#字典转字符串" class="headerlink" title="字典转字符串"></a>字典转字符串</h5><p>json.dumps转换：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dic = &#123;<span class="string">&#x27;1&#x27;</span>: <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;2&#x27;</span>: <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;3&#x27;</span>: <span class="string">&#x27;c&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>json.dumps(dic)</span><br><span class="line"><span class="string">&#x27;&#123;&quot;1&quot;: &quot;a&quot;, &quot;2&quot;: &quot;b&quot;, &quot;3&quot;: &quot;c&quot;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>str强制转换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dic = &#123;<span class="string">&#x27;1&#x27;</span>: <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;2&#x27;</span>: <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;3&#x27;</span>: <span class="string">&#x27;c&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str(dic)</span><br><span class="line"><span class="string">&quot;&#123;&#x27;1&#x27;: &#x27;a&#x27;, &#x27;2&#x27;: &#x27;b&#x27;, &#x27;3&#x27;: &#x27;c&#x27;&#125;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="元组与字符串的相互转换"><a href="#元组与字符串的相互转换" class="headerlink" title="元组与字符串的相互转换"></a>元组与字符串的相互转换</h4><h5 id="元组转字符串"><a href="#元组转字符串" class="headerlink" title="元组转字符串"></a>元组转字符串</h5><p>str强制转换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>tup1= (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str(tup1)</span><br><span class="line"><span class="string">&#x27;(1, 2, 3)&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(tup1)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">tuple</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span>(<span class="params">str(<span class="params">tup1</span>)</span>)</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">str</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure><p>用字符分割：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>tup2 = (<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27; &#x27;</span>.join(tup2)</span><br><span class="line"><span class="string">&#x27;1 2 3&#x27;</span></span><br></pre></td></tr></table></figure><h5 id="字符串转元组"><a href="#字符串转元组" class="headerlink" title="字符串转元组"></a>字符串转元组</h5><p>直接用tuple强制转：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>str1 = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tuple(str1)</span><br><span class="line">(<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>)</span><br></pre></td></tr></table></figure><p>字符串中包含元组，用eval获取字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>str2 = <span class="string">&quot;(&#x27;1&#x27;,&#x27;2&#x27;,&#x27;3&#x27;)&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tup1 = eval(str2)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tup1</span><br><span class="line">(<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(str2)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">str</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span>(<span class="params">tup1</span>)</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">tuple</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt;</span></span><br></pre></td></tr></table></figure><h4 id="元组与列表的相互转换"><a href="#元组与列表的相互转换" class="headerlink" title="元组与列表的相互转换"></a>元组与列表的相互转换</h4><h5 id="元组转列表"><a href="#元组转列表" class="headerlink" title="元组转列表"></a>元组转列表</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>tup1 = (<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(tup1)</span><br><span class="line">[<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>]</span><br></pre></td></tr></table></figure><h5 id="列表转元组"><a href="#列表转元组" class="headerlink" title="列表转元组"></a>列表转元组</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tuple(list)</span><br><span class="line">(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="元组与字典的相互转换"><a href="#元组与字典的相互转换" class="headerlink" title="元组与字典的相互转换"></a>元组与字典的相互转换</h4><h5 id="元组转字典"><a href="#元组转字典" class="headerlink" title="元组转字典"></a>元组转字典</h5><p>类似列表转字典，用zip函数过渡，之后用dict转换：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>tup3 = (<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tup4 = (<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict(zip(tup3,tup4))</span><br><span class="line">&#123;<span class="string">&#x27;1&#x27;</span>: <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;2&#x27;</span>: <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;3&#x27;</span>: <span class="string">&#x27;c&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><h5 id="字典转元组"><a href="#字典转元组" class="headerlink" title="字典转元组"></a>字典转元组</h5><p>字典的key和value分别用tuple转为元组：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dic1 = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tuple(dic1.keys())</span><br><span class="line">(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tuple(dic1.values())</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;列表与字符串的相互转换&quot;&gt;&lt;a href=&quot;#列表与字符串的相互转换&quot; class=&quot;headerlink&quot; title=&quot;列表与字符串的相互转换&quot;&gt;&lt;/a&gt;列表与字符串的相互转换&lt;/h4&gt;&lt;h5 id=&quot;列表转字符串&quot;&gt;&lt;a href=&quot;#列表转字符串&quot; class=&quot;headerlink&quot; title=&quot;列表转字符串&quot;&gt;&lt;/a&gt;列表转字符串&lt;/h5&gt;&lt;p&gt;将列表中的元素用特定的符号连接成一个字符串：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;list1 = [&lt;span class=&quot;string&quot;&gt;&amp;#x27;a&amp;#x27;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&amp;#x27;b&amp;#x27;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&amp;#x27;c&amp;#x27;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;str1 = &lt;span class=&quot;string&quot;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;.join(list1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;str1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&amp;#x27;abc&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;str2 = &lt;span class=&quot;string&quot;&gt;&amp;#x27;-&amp;#x27;&lt;/span&gt;.join(list1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;str2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&amp;#x27;a-b-c&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="python" scheme="https://www.lauyongyi.cn/categories/python/"/>
    
    
    <category term="python" scheme="https://www.lauyongyi.cn/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python基础--常用内置函数</title>
    <link href="https://www.lauyongyi.cn/python%E5%9F%BA%E7%A1%80--%E5%B8%B8%E7%94%A8%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0.html"/>
    <id>https://www.lauyongyi.cn/python%E5%9F%BA%E7%A1%80--%E5%B8%B8%E7%94%A8%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0.html</id>
    <published>2020-12-31T08:30:00.000Z</published>
    <updated>2021-01-14T06:14:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>​    主要记录python常用的内置函数<a id="more"></a></p><h4 id="标准输出函数print"><a href="#标准输出函数print" class="headerlink" title="标准输出函数print()"></a>标准输出函数print()</h4><p>​    <strong>print()</strong> 函数是所有python使用者最先接触也是用得最多的一个函数。print()函数一次可以打印多个对象，对象可以是任意类型。print()函数有以下几个默认参数：</p><ul><li>sep：间隔多个输出对象，默认值是一个空格</li><li>end：设定结尾，默认值是换行符</li><li>file：要写入的文件对象，默认是标准输出控制台（sys.stdout)</li><li>flush：是否立即输出缓存，默认内容不会立即被输出</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> print(<span class="number">3</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;joe&#x27;</span>&#125;)</span><br><span class="line"><span class="number">3</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;joe&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;y&#x27;</span>, sep=<span class="string">&#x27;*&#x27;</span>)<span class="comment">#多个打印对象之间使用星号分隔</span></span><br><span class="line"><span class="number">1</span>*<span class="number">2</span>*x*y</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> item <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;y&#x27;</span>]:</span><br><span class="line"><span class="meta">... </span>    print(item,end=<span class="string">&#x27;,&#x27;</span>)<span class="comment">#不换行打印</span></span><br><span class="line">...</span><br><span class="line"><span class="number">1</span>,<span class="number">2</span>,x,y,</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> open(<span class="string">r&#x27;d:\print_out.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> fp:<span class="comment">#打印到文件</span></span><br><span class="line"><span class="meta">... </span>    print(<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;y&#x27;</span>, sep=<span class="string">&#x27;*&#x27;</span>,file=fp)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>下面的例子，就是利用print()函数的多参数，实现的各种效果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printer</span>(<span class="params">text, delay=<span class="number">0.85</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;打字机效果&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> text:</span><br><span class="line">        print(ch,end=<span class="string">&#x27;&#x27;</span>, flush=<span class="literal">True</span>)</span><br><span class="line">        time.sleep(delay)</span><br><span class="line">    print()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">waiting</span>(<span class="params">cycle=<span class="number">20</span>, delay=<span class="number">0.1</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;旋转式进度指示&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(cycle):</span><br><span class="line">        <span class="keyword">for</span> ch <span class="keyword">in</span> [<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;\\&#x27;</span>,<span class="string">&#x27;|&#x27;</span>,<span class="string">&#x27;/&#x27;</span>]:</span><br><span class="line">            print(<span class="string">&#x27;\b%s&#x27;</span>%ch,end=<span class="string">&#x27;&#x27;</span>,flush=<span class="literal">True</span>)</span><br><span class="line">            time.sleep(delay)</span><br><span class="line">    print()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cover</span>(<span class="params">cycle=<span class="number">100</span>,delay=<span class="number">0.2</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;覆盖式打印效果&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(cycle):</span><br><span class="line">        s = <span class="string">&#x27;\r%d&#x27;</span>%i</span><br><span class="line">        print(s.ljust(<span class="number">3</span>),end=<span class="string">&#x27;&#x27;</span>,flush=<span class="literal">True</span>)</span><br><span class="line">        time.sleep(delay)</span><br><span class="line">    print()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    printer(<span class="string">&#x27;落霞与孤鹜齐飞，秋水共长天一色。渔舟唱晚，响穷彭蠡之滨，雁阵惊寒，声断衡阳之浦&#x27;</span>)</span><br><span class="line">    waiting(cycle=<span class="number">20</span>)</span><br><span class="line">    cover(cycle=<span class="number">20</span>)</span><br></pre></td></tr></table></figure><h4 id="标准输入函数input"><a href="#标准输入函数input" class="headerlink" title="标准输入函数input()"></a>标准输入函数input()</h4><p>​    <strong>input()</strong> 函数用于程序执行过程中接收键盘输入。按回车键，<strong>input()</strong> 函数即返回从键盘输入的字符串，但不包括回车符。因为 input()函数本身具备IO阻塞的功能，所以也可以在程序中作为调试断点来使用。input()函数没有默认参数，接收一个字符串作为输入提示信息。</p><p>示例代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>nums = input()</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(nums)<span class="comment">#这里nums 是一个字符串，不是整数</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[int(item) <span class="keyword">for</span> item <span class="keyword">in</span> nums.split()]<span class="comment">#这里进行转换，变成整数</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h4 id="可迭代对象长度函数len"><a href="#可迭代对象长度函数len" class="headerlink" title="可迭代对象长度函数len()"></a>可迭代对象长度函数len()</h4><p>​    len 是 length 的缩写，该函数可以返回列表、元组、字典、字符串等可迭代对象的长度（或称为元素数量）。</p><p>示例代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(<span class="string">&#x27;asadasdasd&#x27;</span>)</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>len([<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(&#123;<span class="string">&#x27;x&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;y&#x27;</span>:<span class="number">2</span>&#125;)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(&#123;<span class="literal">True</span>,<span class="literal">False</span>,<span class="literal">None</span>&#125;)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(range(<span class="number">5</span>))</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><h4 id="序列生成器函数range"><a href="#序列生成器函数range" class="headerlink" title="序列生成器函数range()"></a>序列生成器函数range()</h4><p>​    <strong>range()</strong> 函数可以返回一个整数序列，只是无法看到这个序列的全貌，也不能访问其中的某个元素。只能从头开始依次便利每一个元素。 <strong>range()</strong> 函数可以接受一个、两个、或者三个整型参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(range(<span class="number">5</span>))</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">range</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">for</span> <span class="title">i</span> <span class="title">in</span> <span class="title">range</span>(<span class="params"><span class="number">5</span></span>):</span><span class="comment">#默认从0开始，步长为1</span></span><br><span class="line"><span class="meta">... </span>    print(i, end=<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">...</span><br><span class="line"><span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>,<span class="number">10</span>):<span class="comment">#在[5,10]区间内生成序列，步长为1</span></span><br><span class="line"><span class="meta">... </span>    print(i, end=<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">...</span><br><span class="line"><span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>,<span class="number">2</span>):<span class="comment">#在[1,10]区间内生成序列，步长为2</span></span><br><span class="line"><span class="meta">... </span>    print(i,end=<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">...</span><br><span class="line"><span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(range(<span class="number">10</span>))<span class="comment">#转换成list</span></span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h4 id="格式化输出函数format"><a href="#格式化输出函数format" class="headerlink" title="格式化输出函数format()"></a>格式化输出函数format()</h4><p>Python中格式化输出字符串使用 <strong>format()</strong> 函数, </p><ul><li>字符串的参数使用{NUM}进行表示, 0表示第一个参数, 1表示第二个参数, 以后顺次递加。</li><li>使用”:”, 指定代表元素需要的操作, 如”:.3”小数点三位, “:8”占8个字符空间等;</li><li>数字(0, 1, …)即代表format()里面的元素, 所以可以使用”.”调用元素的方法;</li></ul><h5 id="常用的格式化符号"><a href="#常用的格式化符号" class="headerlink" title="常用的格式化符号"></a>常用的格式化符号</h5><table><thead><tr><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>{:.2f}</td><td>四舍五入，保留小数点后两位</td></tr><tr><td>{:.+2f}</td><td>四舍五入，保留小数点后两位，带符号</td></tr><tr><td>{:0&gt;2d}</td><td>整数左侧部0，总长度为2</td></tr><tr><td>{:X&lt;4d}</td><td>整数右侧补X，总长度未4</td></tr><tr><td>{:,}</td><td>为整数增加逗号分隔符</td></tr><tr><td>{:.2%}</td><td>百分比格式化，保留小数点后两位</td></tr><tr><td>{:.2e}</td><td>科学计数法，保留小数点后两位</td></tr><tr><td>{:&gt;10d}</td><td>长度为10以内右对齐</td></tr><tr><td>{:&lt;10d}</td><td>长度为10以内左对齐</td></tr><tr><td>{:^0d}</td><td>长度为10以内居中对齐</td></tr><tr><td>{:b}</td><td>转为二进制</td></tr><tr><td>{:#b}</td><td>转为带前缀0b</td></tr><tr><td>{:o}</td><td>转为八进制</td></tr><tr><td>{:#o}</td><td>转为带前缀0o的八进制</td></tr><tr><td>{:x}</td><td>转为16进制</td></tr><tr><td>{:#x}</td><td>转为带前缀0x的十六进制</td></tr><tr><td>{:#X}</td><td>转为带前缀0X的十六进制</td></tr></tbody></table><p>也可以使用% 实现格式化字符串输出</p><table><thead><tr><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>%d或%i</td><td>转为带符号的十进制形式的整数</td></tr><tr><td>%o</td><td>转为带符号的八进制形式整数</td></tr><tr><td>%x或%X</td><td>转为带符号的十六进制形式整数</td></tr><tr><td>%e或%E</td><td>转为科学计数法表示的浮点数</td></tr><tr><td>%f或%F</td><td>转为十进制形式的浮点数</td></tr><tr><td>%g或%G</td><td>智能选择使用%e、%E或%f、%F</td></tr><tr><td>%c</td><td>格式化字符及其ASCII码</td></tr><tr><td>%r</td><td>使用repr()变量或表达式转为字符串</td></tr><tr><td>%s</td><td>使用str()变量或表达式转为字符串</td></tr></tbody></table><h5 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>Y,M,D,h,m,s = <span class="number">2009</span>, <span class="number">2</span>, <span class="number">17</span>, <span class="number">10</span>, <span class="number">48</span>, <span class="number">39</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;&#123;:04d&#125;-&#123;:02d&#125;-&#123;:02d&#125; &#123;:02d&#125;:&#123;:02d&#125;:&#123;:02d&#125;&#x27;</span>.format(Y,M,D,h,m,s)</span><br><span class="line"><span class="string">&#x27;2009-02-17 10:48:39&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;%04d-%02d-%02d %02d:%02d:%02d&#x27;</span>%(Y,M,D,h,m,s)</span><br><span class="line"><span class="string">&#x27;2009-02-17 10:48:39&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="排序函数sorted"><a href="#排序函数sorted" class="headerlink" title="排序函数sorted()"></a>排序函数sorted()</h4><p>​    排序函数 <strong>sorted()</strong> 不会改变排序列表的数据结构，而是返回一个新的排序结果。这一点和列表对象的 <strong>sort()</strong> 方法不同。列表对象的sort()方法改变了列表本身，且无返回值。</p><h5 id="示例代码-1"><a href="#示例代码-1" class="headerlink" title="示例代码"></a>示例代码</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted([<span class="number">3</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">5</span>])</span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [[<span class="number">6</span>, <span class="number">5</span>], [<span class="number">3</span>, <span class="number">7</span>], [<span class="number">2</span>, <span class="number">8</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(a, key=<span class="keyword">lambda</span> x:x[<span class="number">0</span>]) <span class="comment"># 根据每一行的首元素排序，默认reverse=False</span></span><br><span class="line">[[<span class="number">2</span>, <span class="number">8</span>], [<span class="number">3</span>, <span class="number">7</span>], [<span class="number">6</span>, <span class="number">5</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(a, key=<span class="keyword">lambda</span> x:x[<span class="number">-1</span>]) <span class="comment"># 根据每一行的尾元素排序，设置reverse=True实现逆序</span></span><br><span class="line">[[<span class="number">6</span>, <span class="number">5</span>], [<span class="number">3</span>, <span class="number">7</span>], [<span class="number">2</span>, <span class="number">8</span>]]</span><br></pre></td></tr></table></figure><h4 id="文件读写函数open"><a href="#文件读写函数open" class="headerlink" title="文件读写函数open()"></a>文件读写函数open()</h4><p>​    python <strong>open()</strong> 函数用于打开一个文件，创建一个 <strong>file</strong> 对象，相关的方法才可以调用它进行读写。</p><h5 id="函数语法"><a href="#函数语法" class="headerlink" title="函数语法"></a>函数语法</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open(name[, mode[, buffering]])</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>name : 一个包含了你要访问的文件名称的字符串值。</li><li>mode : mode 决定了打开文件的模式：只读，写入，追加等。所有可取值见如下的完全列表。这个参数是非强制的，默认文件访问模式为只读(r)。</li><li>buffering : 如果 buffering 的值被设为 0，就不会有寄存。如果 buffering 的值取 1，访问文件时会寄存行。如果将 buffering 的值设为大于 1 的整数，表明了这就是的寄存区的缓冲大小。如果取负值，寄存区的缓冲大小则为系统默认。</li></ul><h5 id="不同模式打开文件的完全列表："><a href="#不同模式打开文件的完全列表：" class="headerlink" title="不同模式打开文件的完全列表："></a>不同模式打开文件的完全列表：</h5><table><thead><tr><th align="left">模式</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">t</td><td align="left">文本模式 (默认)。</td></tr><tr><td align="left">x</td><td align="left">写模式，新建一个文件，如果该文件已存在则会报错。</td></tr><tr><td align="left">b</td><td align="left">二进制模式。</td></tr><tr><td align="left">+</td><td align="left">打开一个文件进行更新(可读可写)。</td></tr><tr><td align="left">U</td><td align="left">通用换行模式（不推荐）。</td></tr><tr><td align="left">r</td><td align="left">以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td></tr><tr><td align="left">rb</td><td align="left">以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。一般用于非文本文件如图片等。</td></tr><tr><td align="left">r+</td><td align="left">打开一个文件用于读写。文件指针将会放在文件的开头。</td></tr><tr><td align="left">rb+</td><td align="left">以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。一般用于非文本文件如图片等。</td></tr><tr><td align="left">w</td><td align="left">打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td align="left">wb</td><td align="left">以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。</td></tr><tr><td align="left">w+</td><td align="left">打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td align="left">wb+</td><td align="left">以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。</td></tr><tr><td align="left">a</td><td align="left">打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td align="left">ab</td><td align="left">以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td align="left">a+</td><td align="left">打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</td></tr><tr><td align="left">ab+</td><td align="left">以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。</td></tr></tbody></table><h5 id="示例代码-2"><a href="#示例代码-2" class="headerlink" title="示例代码"></a>示例代码</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>data =  [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>],[<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> open (<span class="string">r&#x27;d:\csv_data.csv&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">for</span> line <span class="keyword">in</span> data:</span><br><span class="line"><span class="meta">... </span>            ok = fp.write(<span class="string">&#x27;%s\n&#x27;</span>%<span class="string">&#x27;,&#x27;</span>.join([str(item) <span class="keyword">for</span> item <span class="keyword">in</span> line]))</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>result = list()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> open(<span class="string">r&#x27;d:\csv_data.csv&#x27;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">for</span> line <span class="keyword">in</span> fp.readlines():</span><br><span class="line"><span class="meta">... </span>            result.append([float(f) <span class="keyword">for</span> f <span class="keyword">in</span> line.strip().split(<span class="string">&#x27;,&#x27;</span>)])</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>result</span><br><span class="line">[[<span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">3.0</span>, <span class="number">4.0</span>, <span class="number">5.0</span>, <span class="number">6.0</span>, <span class="number">7.0</span>], [<span class="number">8.0</span>, <span class="number">9.0</span>, <span class="number">10.0</span>, <span class="number">11.0</span>, <span class="number">12.0</span>, <span class="number">13.0</span>, <span class="number">14.0</span>, <span class="number">15.0</span>]]</span><br></pre></td></tr></table></figure><p>补充说明： <strong>file</strong> 对象</p><ul><li>**file.read([size])**：size 未指定则返回整个文件，如果文件大小 &gt;2 倍内存则有问题，f.read()读到文件尾时返回””(空字串)。</li><li>**file.readline()**：返回一行。</li><li><strong>file.readlines([size])</strong> ：返回包含size行的列表, size 未指定则返回全部行。</li><li><strong>for line in f: print line</strong> ：通过迭代器访问。</li><li>**f.write(“hello\n”)**：如果要写入字符串以外的数据,先将他转换为字符串。</li><li>**f.tell()**：返回一个整数,表示当前文件指针的位置(就是到文件头的字节数)。</li><li>**f.seek(偏移量,[起始位置])**：用来移动文件指针。<ul><li>偏移量: 单位为字节，可正可负</li><li>起始位置: 0 - 文件头, 默认值; 1 - 当前位置; 2 - 文件尾</li></ul></li><li><strong>f.close()</strong> 关闭文件</li></ul><h5 id="示例代码-3"><a href="#示例代码-3" class="headerlink" title="示例代码"></a>示例代码</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f =open(<span class="string">&#x27;d:\csv_data.csv&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.read()</span><br><span class="line"><span class="string">&#x27;1,2,3,4,5,6,7\n8,9,10,11,12,13,14,15\n&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="类型相关函数type-isinstance"><a href="#类型相关函数type-isinstance" class="headerlink" title="类型相关函数type()/isinstance()"></a>类型相关函数type()/isinstance()</h4><h5 id="type"><a href="#type" class="headerlink" title="type()"></a>type()</h5><p><strong>type()</strong>  函数如果你只有第一个参数则返回对象的类型，三个参数返回新的类型对象。</p><h6 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">type(object)</span><br><span class="line">type(name, bases, dict)</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><ul><li><p>name – 类的名称。</p></li><li><p>bases – 基类的元组。</p></li><li><p>dict – 字典，类内定义的命名空间变量。</p></li></ul><h6 id="示例代码-4"><a href="#示例代码-4" class="headerlink" title="示例代码"></a>示例代码</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(<span class="number">1</span>)</span><br><span class="line">&lt;type <span class="string">&#x27;int&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(<span class="string">&#x27;runoob&#x27;</span>)</span><br><span class="line">&lt;type <span class="string">&#x27;str&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type([<span class="number">2</span>])</span><br><span class="line">&lt;type <span class="string">&#x27;list&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(&#123;<span class="number">0</span>:<span class="string">&#x27;zero&#x27;</span>&#125;)</span><br><span class="line">&lt;type <span class="string">&#x27;dict&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">1</span>          </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type( x ) == int    <span class="comment"># 判断类型是否相等</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><h5 id="isinstance"><a href="#isinstance" class="headerlink" title="isinstance()"></a>isinstance()</h5><p><strong>isinstance()</strong> 函数来判断一个对象是否是一个已知的类型，类似 type()。</p><h6 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">isinstance(object, classinfo)</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><ul><li>object – 实例对象。</li><li>classinfo – 可以是直接或间接类名、基本类型或者由它们组成的元组。</li></ul><h6 id="示例代码-5"><a href="#示例代码-5" class="headerlink" title="示例代码"></a>示例代码</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;a = <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance (a,int)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance (a,str)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance (a,(str,int,list))    <span class="comment"># 是元组中的一个返回 True</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><h5 id="isinstance-与-type-区别："><a href="#isinstance-与-type-区别：" class="headerlink" title="isinstance() 与 type() 区别："></a>isinstance() 与 type() 区别：</h5><ul><li>type() 不会认为子类是一种父类类型，不考虑继承关系。</li><li>isinstance() 会认为子类是一种父类类型，考虑继承关系。</li></ul><p>如果要判断两个类型是否相同推荐使用 isinstance()。</p><h4 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h4><h5 id="sum"><a href="#sum" class="headerlink" title="sum()"></a>sum()</h5><p><strong>sum()</strong> 方法对序列进行求和计算。</p><h6 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sum(iterable[, start])</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><ul><li>iterable – 可迭代对象，如：列表、元组、集合。</li><li>start – 指定相加的参数，如果没有设置这个值，默认为0。</li></ul><h6 id="示例代码-6"><a href="#示例代码-6" class="headerlink" title="示例代码"></a>示例代码</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;sum([<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>])  </span><br><span class="line"><span class="number">3</span>  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sum((<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>), <span class="number">1</span>)        <span class="comment"># 元组计算总和后再加 1</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sum([<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], <span class="number">2</span>)      <span class="comment"># 列表计算总和后再加 2</span></span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><h5 id="max-min"><a href="#max-min" class="headerlink" title="max()/min()"></a>max()/min()</h5><p><strong>max()</strong>  方法返回给定参数的最大值，参数可以为序列。</p><p><strong>min()</strong>  方法返回给定参数的最小值，参数可以为序列。</p><h6 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">max( x, y, z, .... )</span><br><span class="line">min( x, y, z, .... )</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><ul><li>x – 数值表达式。</li><li>y – 数值表达式。</li><li>z – 数值表达式。</li></ul><h6 id="示例代码-7"><a href="#示例代码-7" class="headerlink" title="示例代码"></a>示例代码</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>max(<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">8</span>)</span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>min(<span class="number">5</span>,<span class="number">2</span>,<span class="number">2.1</span>)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>min([<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]),max([<span class="number">9.99</span>,<span class="number">0.1</span>])</span><br><span class="line">(<span class="number">3</span>, <span class="number">9.99</span>)</span><br></pre></td></tr></table></figure><h5 id="abs"><a href="#abs" class="headerlink" title="abs()"></a>abs()</h5><p><strong>abs()</strong> 函数返回数字的绝对值。</p><h6 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">abs( x )</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><ul><li>x – 数值表达式。</li></ul><h6 id="示例代码-8"><a href="#示例代码-8" class="headerlink" title="示例代码"></a>示例代码</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>abs(<span class="number">-9.99</span>)</span><br><span class="line"><span class="number">9.99</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>abs(<span class="number">9</span>)</span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure><h5 id="pow"><a href="#pow" class="headerlink" title="pow()"></a>pow()</h5><p><strong>pow()</strong> 方法返回 xy（x 的 y 次方） 的值。</p><h6 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h6><p>以下是 math 模块 pow() 方法的语法:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">math.pow( x, y )</span><br></pre></td></tr></table></figure><p>内置的 pow() 方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pow(x, y[, z])</span><br></pre></td></tr></table></figure><p>函数是计算 x 的 y 次方，如果 z 在存在，则再对结果进行取模，其结果等效于 pow(x,y) %z。</p><p><strong>注意：</strong> pow() 通过内置的方法直接调用，内置方法会把参数作为整型，而 math 模块则会把参数转换为 float。</p><p><strong>参数</strong></p><ul><li>x – 数值表达式。</li><li>y – 数值表达式。</li><li>z – 数值表达式。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>pow(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> math</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>math.pow(<span class="number">100</span>,<span class="number">-2</span>)</span><br><span class="line"><span class="number">0.0001</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>math.pow(<span class="number">100</span>,<span class="number">2</span>)</span><br><span class="line"><span class="number">10000.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pow(<span class="number">2</span>,<span class="number">-2</span>)</span><br><span class="line"><span class="number">0.25</span></span><br></pre></td></tr></table></figure><h5 id="divmod"><a href="#divmod" class="headerlink" title="divmod()"></a>divmod()</h5><p>python  <strong>divmod()</strong>  函数把除数和余数运算结果结合起来，返回一个包含商和余数的元组(a // b, a % b)。</p><h6 id="函数语法-1"><a href="#函数语法-1" class="headerlink" title="函数语法"></a>函数语法</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">divmod(a, b)</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>a: 数字</li><li>b: 数字</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;divmod(<span class="number">7</span>, <span class="number">2</span>)</span><br><span class="line">(<span class="number">3</span>, <span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>divmod(<span class="number">8</span>, <span class="number">2</span>)</span><br><span class="line">(<span class="number">4</span>, <span class="number">0</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>divmod(<span class="number">1</span>+<span class="number">2j</span>,<span class="number">1</span>+<span class="number">0.5j</span>)</span><br><span class="line">((<span class="number">1</span>+<span class="number">0j</span>), <span class="number">1.5j</span>)</span><br></pre></td></tr></table></figure><h5 id="round"><a href="#round" class="headerlink" title="round()"></a>round()</h5><p><strong>round()</strong> 方法返回浮点数x的四舍五入值。</p><h6 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">round( x, n )</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><ul><li>x – 数值表达式。</li><li>n – 数值表达式，表示从小数点位数。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>round(<span class="number">80.4656541231</span>,<span class="number">2</span>)</span><br><span class="line"><span class="number">80.47</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>round(<span class="number">80.4656541231</span>,<span class="number">3</span>)</span><br><span class="line"><span class="number">80.466</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>round(<span class="number">-80.4656541231</span>,<span class="number">3</span>)</span><br><span class="line"><span class="number">-80.466</span></span><br></pre></td></tr></table></figure><h4 id="特殊功能函数"><a href="#特殊功能函数" class="headerlink" title="特殊功能函数"></a>特殊功能函数</h4><h5 id="zip-函数"><a href="#zip-函数" class="headerlink" title="zip()函数"></a>zip()函数</h5><p><strong>zip()</strong> 函数用于将可迭代的对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的列表。</p><p>如果各个迭代器的元素个数不一致，则返回列表长度与最短的对象相同，利用 * 号操作符，可以将元组解压为列表。</p><h6 id="语法-7"><a href="#语法-7" class="headerlink" title="语法"></a>语法</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zip([iterable, ...])</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>iterabl – 一个或多个迭代器;</li></ul><h6 id="示例代码-9"><a href="#示例代码-9" class="headerlink" title="示例代码"></a>示例代码</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>zipped = zip(a,b)     <span class="comment"># 返回一个对象</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>zipped</span><br><span class="line">&lt;zip object at <span class="number">0x103abc288</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(zipped)  <span class="comment"># list() 转换为列表</span></span><br><span class="line">[(<span class="number">1</span>, <span class="number">4</span>), (<span class="number">2</span>, <span class="number">5</span>), (<span class="number">3</span>, <span class="number">6</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(zip(a,c))              <span class="comment"># 元素个数与最短的列表一致</span></span><br><span class="line">[(<span class="number">1</span>, <span class="number">4</span>), (<span class="number">2</span>, <span class="number">5</span>), (<span class="number">3</span>, <span class="number">6</span>)]</span><br><span class="line"> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a1, a2 = zip(*zip(a,b))          <span class="comment"># 与 zip 相反，zip(*) 可理解为解压，返回二维矩阵式</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(a1)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(a2)</span><br><span class="line">[<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h5 id="eval-函数"><a href="#eval-函数" class="headerlink" title="eval() 函数"></a>eval() 函数</h5><p><strong>eval()</strong> 函数用来执行一个字符串表达式，并返回表达式的值。</p><h6 id="语法-8"><a href="#语法-8" class="headerlink" title="语法"></a>语法</h6><p>以下是 eval() 方法的语法:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eval(expression[, globals[, locals]])</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><ul><li>expression – 表达式。</li><li>globals – 变量作用域，全局命名空间，如果被提供，则必须是一个字典对象。</li><li>locals – 变量作用域，局部命名空间，如果被提供，可以是任何映射对象。</li></ul><h6 id="示例代码-10"><a href="#示例代码-10" class="headerlink" title="示例代码"></a>示例代码</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;x = <span class="number">7</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>eval( <span class="string">&#x27;3 * x&#x27;</span> )</span><br><span class="line"><span class="number">21</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>eval(<span class="string">&#x27;pow(2,2)&#x27;</span>)</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>eval(<span class="string">&#x27;2 + 2&#x27;</span>)</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>n=<span class="number">81</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>eval(<span class="string">&quot;n + 4&quot;</span>)</span><br><span class="line"><span class="number">85</span></span><br></pre></td></tr></table></figure><p>​    <strong>eval虽然方便，但是要注意安全性，可以将字符串转成表达式并执行，就可以利用执行系统命令，删除文件等操作。</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;​    主要记录python常用的内置函数</summary>
    
    
    
    <category term="python" scheme="https://www.lauyongyi.cn/categories/python/"/>
    
    
    <category term="python" scheme="https://www.lauyongyi.cn/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python基础--常用内置类</title>
    <link href="https://www.lauyongyi.cn/python%E5%9F%BA%E7%A1%80--%E5%B8%B8%E7%94%A8%E5%86%85%E7%BD%AE%E7%B1%BB.html"/>
    <id>https://www.lauyongyi.cn/python%E5%9F%BA%E7%A1%80--%E5%B8%B8%E7%94%A8%E5%86%85%E7%BD%AE%E7%B1%BB.html</id>
    <published>2020-12-31T03:14:00.000Z</published>
    <updated>2020-12-31T05:55:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>​    python 内置了 列表、字典、元组、集合和字符串等多种数据结构，每种数据结构都封装成为一个类。<a id="more"></a></p><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><p>​    列表（list）是元素的有序集合，列表的元素可以是python语言支持的任意类型。惯用写法是用方括号([])来创建列表，标准写法是用 list() 来实例化 list 类。列表的方法有很多，可以实现列表末尾追加元素、指定位置插入元素、删除指定元素或指定索引位置的元素、返回元素索引、排序等操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = list()<span class="comment">#创建一个空列表，可以传入列表、元组、字符串等迭代对象</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.append(<span class="number">3</span>)<span class="comment"># 列表尾部追加元素3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.extend([<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">7</span>])<span class="comment">#列表后接列表[4,5,6,7,8,7]</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">7</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.insert(<span class="number">1</span>,<span class="number">9</span>)<span class="comment">#在索引序号为1的位置插入元素9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">3</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">7</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.index(<span class="number">9</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.count(<span class="number">7</span>)<span class="comment">#返回列表中值为7的元素个数</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.pop(<span class="number">1</span>)<span class="comment">#删除并返回索引序号为1的元素，如果不指定索引，则删除最后一个元素</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">7</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.remove(<span class="number">7</span>)<span class="comment">#删除列表中最靠前的元素7（无返回）</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">7</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.sort()<span class="comment">#排序</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">-1</span>]<span class="comment">#Python引入-1做末尾的元素索引</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">1</span>:<span class="number">-1</span>]<span class="comment">#掐头去尾 切片</span></span><br><span class="line">[<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[::<span class="number">2</span>]<span class="comment">#从头开始，隔一个取一个元素</span></span><br><span class="line">[<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[::<span class="number">-1</span>]<span class="comment">#逆序</span></span><br><span class="line">[<span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure><h4 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h4><p>​    字典（dict）的本质是 无序的键值对。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = dict()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = dict(a=<span class="number">1</span>,b=<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = dict([(<span class="string">&#x27;a&#x27;</span>,<span class="number">1</span>),(<span class="string">&#x27;b&#x27;</span>,<span class="number">2</span>)])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.update(&#123;<span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.pop(<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(d.items())</span><br><span class="line">[(<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>), (<span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(d.keys())</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(d.values())</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> key <span class="keyword">in</span> d:</span><br><span class="line"><span class="meta">... </span>    print(key,d[key])</span><br><span class="line">...</span><br><span class="line">a <span class="number">1</span></span><br><span class="line">b <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict.fromkeys(<span class="string">&#x27;xyz&#x27;</span>,<span class="number">0</span>)<span class="comment">#fromkeys 是字典类的静态方法，实例也可以调用</span></span><br><span class="line">&#123;<span class="string">&#x27;x&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;y&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;z&#x27;</span>: <span class="number">0</span>&#125;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h4 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h4><p>​    元组（tuple）可以理解为限制版的列表，也是元素的有序集合，但这个集合一旦创建，就不允许增加、删除和修改元素。通常，元组用于表示特定的概念，如坐标、矩形区域等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a =(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = tuple([<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.count(<span class="number">3</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.index(<span class="number">3</span>)</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.append(<span class="number">1</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: <span class="string">&#x27;tuple&#x27;</span> object has no attribute <span class="string">&#x27;append&#x27;</span> <span class="comment">#不允许增加</span></span><br></pre></td></tr></table></figure><h4 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h4><p>​    集合（set）有两个特点，一是集合内元素具有唯一性，二是集合内元素无需排列。集合有一个很经典的用法：去除列表内的重复元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = set()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.update(&#123;<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27;z&#x27;</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&#123;<span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.remove(<span class="string">&#x27;z&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&#123;<span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.add(<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&#123;<span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = &#123;<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = &#123;<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;E&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.difference(b)<span class="comment">#返回a有b没有的元素集合</span></span><br><span class="line">&#123;<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a - b<span class="comment">#简写</span></span><br><span class="line">&#123;<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.union(b)<span class="comment">#返回a和b的并集</span></span><br><span class="line">&#123;<span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;C&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.intersection(b)<span class="comment">#返回a和b重复元素的集合</span></span><br><span class="line">&#123;<span class="string">&#x27;C&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.symmetric_difference(b)<span class="comment">#返回a和b非重复元素的集合</span></span><br><span class="line">&#123;<span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;B&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(set([<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="string">&#x27;x&#x27;</span>,<span class="number">5</span>,<span class="string">&#x27;x&#x27;</span>]))<span class="comment">#去除数组中的重复元素</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="string">&#x27;x&#x27;</span>]</span><br></pre></td></tr></table></figure><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><p>​    字符穿对象可以像列表那样进行索引和切片，但无法改变字符串对象的内容，这有点类似元组不可以增加、删除和修改元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>str(<span class="number">3.14</span>)</span><br><span class="line"><span class="string">&#x27;3.14&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str([<span class="string">&#x27;a&#x27;</span>,<span class="number">1</span>])</span><br><span class="line"><span class="string">&quot;[&#x27;a&#x27;, 1]&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str(&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>&#125;)</span><br><span class="line"><span class="string">&quot;&#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2&#125;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">&quot;hello world&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s[<span class="number">1</span>:<span class="number">-1</span>]</span><br><span class="line"><span class="string">&#x27;ello worl&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s[::<span class="number">2</span>]</span><br><span class="line"><span class="string">&#x27;hlowrd&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s[::<span class="number">-1</span>]</span><br><span class="line"><span class="string">&#x27;dlrow olleh&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.upper()</span><br><span class="line"><span class="string">&#x27;HELLO WORLD&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.lower()</span><br><span class="line"><span class="string">&#x27;hello world&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.capitalize()</span><br><span class="line"><span class="string">&#x27;Hello world&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.title()</span><br><span class="line"><span class="string">&#x27;Hello World&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.startswith(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.endswith(<span class="string">&#x27;world&#x27;</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.find(<span class="string">&#x27;ll&#x27;</span>)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.split()</span><br><span class="line">[<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.replace(<span class="string">&#x27;world&#x27;</span>, <span class="string">&#x27;python&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;hello python&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;1&#x27;</span>.isalpha()</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;asd&#x27;</span>.isalpha()</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;asd12&#x27;</span>.isalpha()</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;asd12&#x27;</span>.isalnum()</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;\t sasd1231 \n&#x27;</span>.strip()</span><br><span class="line"><span class="string">&#x27;sasd1231&#x27;</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;​    python 内置了 列表、字典、元组、集合和字符串等多种数据结构，每种数据结构都封装成为一个类。</summary>
    
    
    
    <category term="python" scheme="https://www.lauyongyi.cn/categories/python/"/>
    
    
    <category term="python" scheme="https://www.lauyongyi.cn/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python基础--数据类型</title>
    <link href="https://www.lauyongyi.cn/python%E5%9F%BA%E7%A1%80--%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html"/>
    <id>https://www.lauyongyi.cn/python%E5%9F%BA%E7%A1%80--%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html</id>
    <published>2020-12-31T02:14:00.000Z</published>
    <updated>2020-12-31T02:55:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>​    python中，数据被分为四种类型，分别是：整型、浮点型、布尔型和字符串，并提供了 <strong>int</strong> 类，<strong>float</strong> 类，<strong>bool</strong> 类和 <strong>str</strong> 类这四个内置类与之相对应。使用 <strong>type()</strong> 函数可以看到他们各自的类名。<a id="more"></a></p><h4 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h4><p>​    整型数据就是数学上的整数，包括正整数，负整数和零。python不像C，C++把整型分为多种，所以不用担心超过系统限制。</p><p>一个整型的例子，可以区别python与其他的语言</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">factorial</span>(<span class="params">n</span>):</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> n*factorial(n<span class="number">-1</span>)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>factorial(<span class="number">100</span>)</span><br><span class="line"><span class="number">93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000</span></span><br></pre></td></tr></table></figure><h4 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h4><p>​    浮点型数据既可以表示很大的数，也可以表示很小的数。精度是浮点型数据最重要的指标，也是最容易出问题的。</p><p>一个特殊的例子（精度相关的）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">0.1</span>+<span class="number">0.2</span></span><br><span class="line"><span class="number">0.30000000000000004</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">0.1</span>+<span class="number">0.2</span> ==<span class="number">0.3</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1.1</span>+<span class="number">1.2</span></span><br><span class="line"><span class="number">2.3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1.1</span>+<span class="number">1.2</span> == <span class="number">2.3</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><p>​    关于0.1+0.2  != 0.3 ，可以看<span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzI4NTUxMTM1">链接<i class="fa fa-external-link-alt"></i></span>里的回答。</p><h4 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h4><p>​    python定义了两个常量：<strong>True</strong> 和 <strong>False</strong> ，用来表示布尔型的真和假。<strong>True</strong> 表示真、非空、非零等概念，<strong>False</strong> 表示 假、空、零等概念。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>bool(<span class="number">1</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bool(<span class="literal">None</span>)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bool(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bool([])</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bool([<span class="string">&#x27;x&#x27;</span>])</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bool(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bool([<span class="literal">False</span>])</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><p>​    字符串是python语言的处理对象之一。python将 单引号（&#39;&#39;）、双引号（&quot;&quot;）、三引号（&#39;&#39;&#39;或者&quot;&quot;&quot;） 前后封闭起来的字符集视为字符串对象，并提供了一系列的处理方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;hello world&#x27;</span></span><br><span class="line"><span class="string">&#x27;hello world&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;hello world&quot;</span></span><br><span class="line"><span class="string">&#x27;hello world&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;&#x27;&#x27;hello world&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;hello world&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;&quot;&quot;hello world&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&#x27;hello world&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;​    python中，数据被分为四种类型，分别是：整型、浮点型、布尔型和字符串，并提供了 &lt;strong&gt;int&lt;/strong&gt; 类，&lt;strong&gt;float&lt;/strong&gt; 类，&lt;strong&gt;bool&lt;/strong&gt; 类和 &lt;strong&gt;str&lt;/strong&gt; 类这四个内置类与之相对应。使用 &lt;strong&gt;type()&lt;/strong&gt; 函数可以看到他们各自的类名。</summary>
    
    
    
    <category term="python" scheme="https://www.lauyongyi.cn/categories/python/"/>
    
    
    <category term="python" scheme="https://www.lauyongyi.cn/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python基础--语句结构</title>
    <link href="https://www.lauyongyi.cn/python%E5%9F%BA%E7%A1%80--%E8%AF%AD%E5%8F%A5%E7%BB%93%E6%9E%84.html"/>
    <id>https://www.lauyongyi.cn/python%E5%9F%BA%E7%A1%80--%E8%AF%AD%E5%8F%A5%E7%BB%93%E6%9E%84.html</id>
    <published>2020-12-30T10:14:00.000Z</published>
    <updated>2020-12-30T10:55:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>​    python和其他编程语言一样，支持：顺序、分支和循环三种语句结构。<a id="more"></a></p><h4 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h4><p>​    python 把缩进作为语法的一部分，缩进层次相同且连续的一段代码就是一个顺序结构的代码块。运行时，代码块内的代码从上到下，一次被解释执行。</p><h4 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h4><p>​    python语言使用 <strong>if-else</strong> 描述分支结构，支持嵌套，并将 <strong>else if</strong> 简写成 <strong>elif</strong></p><p>示例代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a, b, c = <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> a &gt; b:<span class="comment">#最简单的if-else分支结构</span></span><br><span class="line"><span class="meta">... </span>    print(a)</span><br><span class="line"><span class="meta">... </span><span class="keyword">else</span>:</span><br><span class="line"><span class="meta">... </span>    print(b)</span><br><span class="line">...</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> a &gt; b <span class="keyword">and</span> a &gt; c:<span class="comment">#类似switch结构的分支结构</span></span><br><span class="line"><span class="meta">... </span>    print(a)</span><br><span class="line"><span class="meta">... </span><span class="keyword">elif</span> b &gt; c:</span><br><span class="line"><span class="meta">... </span>    print(b)</span><br><span class="line"><span class="meta">... </span><span class="keyword">else</span>:</span><br><span class="line"><span class="meta">... </span>    print(c)</span><br><span class="line">...</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> a &gt; b:<span class="comment">#嵌套的 if-else 分支结构</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">if</span> a &gt; c:</span><br><span class="line"><span class="meta">... </span>            print(a)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">else</span>:</span><br><span class="line"><span class="meta">... </span>            print(c)</span><br><span class="line"><span class="meta">... </span><span class="keyword">else</span>:</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">if</span> b &gt; c:</span><br><span class="line"><span class="meta">... </span>            print(b)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">else</span>:</span><br><span class="line"><span class="meta">... </span>            print(c)</span><br><span class="line">...</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><p>​    以上代码演示了三种最常见的分支结构。第一种是最简单的 <strong>if-else</strong> 分支结构，即使没有 else 分支也是合乎规则的；第二种是类似 switch 结构的分支结构；第三种是嵌套的 <strong>if-else</strong> 分支结构。</p><h4 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h4><p>​    python的循环结构有两种： <strong>for</strong> 循环和 <strong>while</strong> 循环。<strong>for</strong> 循环一般用于循环次数确定的场合，如遍历列表、字典等。 <strong>while</strong> 循环一般用于循环次数不确定的场合，每次循环之后都要对循环条件进行判断。为了避免“死循环”，在 while 循环体内通常会存在影响循环条件的代码，除非希望while 循环永不停止。</p><p>​    循环体内有两个特殊语句会影响到 for 循环和 while 循环，这就是 continue 和 break 语句。 continue 语句可以立即结束本次循环，开始下一个循环；break 语句则是立即跳出循环，继续执行 for 或 while 循环后面的语句。</p><h5 id="for循环示例："><a href="#for循环示例：" class="headerlink" title="for循环示例："></a>for循环示例：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):<span class="comment">#这是 for循环最经典的用法</span></span><br><span class="line"><span class="meta">... </span>    print(i)</span><br><span class="line">...</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]:<span class="comment">#遍历数组是for循环最频繁的应用形式</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">if</span> i%<span class="number">2</span> ==<span class="number">0</span>:</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">continue</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">if</span> i &gt; <span class="number">8</span>:</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">break</span></span><br><span class="line"><span class="meta">... </span>    print(i*<span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">...</span><br><span class="line">*</span><br><span class="line">***</span><br><span class="line">*****</span><br><span class="line">*******</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> key <span class="keyword">in</span> d:<span class="comment">#遍历字典的标准写法</span></span><br><span class="line"><span class="meta">... </span>    print(key, d[key])</span><br><span class="line">...</span><br><span class="line">a <span class="number">1</span></span><br><span class="line">b <span class="number">2</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h5 id="while循环示例："><a href="#while循环示例：" class="headerlink" title="while循环示例："></a>while循环示例：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">while</span> a &gt; <span class="number">0</span>:<span class="comment">#判断循环条件</span></span><br><span class="line"><span class="meta">... </span>    print(a*<span class="string">&#x27;*&#x27;</span>)</span><br><span class="line"><span class="meta">... </span>    a -= <span class="number">1</span><span class="comment">#影响循环的条件</span></span><br><span class="line">...</span><br><span class="line">***</span><br><span class="line">**</span><br><span class="line">*</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">while</span> <span class="literal">True</span>:<span class="comment">#死循环</span></span><br><span class="line"><span class="meta">... </span>    a += <span class="number">1</span><span class="comment">#影响循环出口的条件</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">if</span> a &gt; <span class="number">3</span>:<span class="comment">#设置循环出口条件</span></span><br><span class="line"><span class="meta">... </span>            <span class="keyword">break</span></span><br><span class="line"><span class="meta">... </span>    print(a*<span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">...</span><br><span class="line">*</span><br><span class="line">**</span><br><span class="line">***</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;​    python和其他编程语言一样，支持：顺序、分支和循环三种语句结构。</summary>
    
    
    
    <category term="python" scheme="https://www.lauyongyi.cn/categories/python/"/>
    
    
    <category term="python" scheme="https://www.lauyongyi.cn/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python基础--类和函数</title>
    <link href="https://www.lauyongyi.cn/python%E5%9F%BA%E7%A1%80--%E7%B1%BB%E5%92%8C%E5%87%BD%E6%95%B0.html"/>
    <id>https://www.lauyongyi.cn/python%E5%9F%BA%E7%A1%80--%E7%B1%BB%E5%92%8C%E5%87%BD%E6%95%B0.html</id>
    <published>2020-12-30T08:14:00.000Z</published>
    <updated>2020-12-30T10:03:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>​    python有两个顶级的结构定义：函数和类。<a id="more"></a></p><h4 id="函数定义（def）"><a href="#函数定义（def）" class="headerlink" title="函数定义（def）"></a>函数定义（def）</h4><p>​    python的函数既可以有参数，也可以没有参数；既可以有返回值，也可以没有返回值。用关键字 <strong>def</strong> 来定义一个函数，用关键字 <strong>return</strong> 返回函数结果（如果需要返回）。</p><p>例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">hello</span>():</span></span><br><span class="line"><span class="meta">... </span>    print(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hello()</span><br><span class="line">hello world</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">adder</span>(<span class="params">x, y</span>):</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> x + y</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>adder (<span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line"><span class="number">11</span></span><br></pre></td></tr></table></figure><p>​    以上的代码定义了两个函数，hello()函数没有参数，也没有返回指；adder()函数有两个参数，返回值市两个参数的和。</p><p>​    <strong>!!!</strong> 定义和调用函数时，即使没有参数，函数名后面的圆括号也不能省略。</p><h4 id="类定义（class）"><a href="#类定义（class）" class="headerlink" title="类定义（class）"></a>类定义（class）</h4><p>​    python类定义的规则非常灵活，既有强制性的，也有建议性的。关于类的定义，只需要了解以下几点,就能轻松应对各种 类:</p><ul><li><p>使用关键字 class 定义类。</p></li><li><p>如果没有基类,类名之后不需要圆括号。</p></li><li><p>构造函数__init__()在类实例化时自动运行,类的属性要在这里定义或声明。</p></li><li><p>self不是关键词，虽可替换，但不建议。</p></li><li><p>类是属性和方法的混合体。</p></li><li><p>同一个类，可以生成很多实列。</p></li><li><p>类的各个实例之间是相互隔离的。</p></li></ul><p>例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GameServer</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, port</span>):</span><span class="comment">#构造函数</span></span><br><span class="line">        self.port = port<span class="comment">#类属性：服务使用的端口</span></span><br><span class="line">        self.running = <span class="literal">False</span><span class="comment">#类属性：服务运行标志</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span>(<span class="params">self</span>):</span><span class="comment">#定义类方法：启动服务</span></span><br><span class="line">        self.running = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stop</span>(<span class="params">self</span>):</span><span class="comment">#定义类方法：停止服务</span></span><br><span class="line">        self.running = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">status</span>(<span class="params">self</span>):</span><span class="comment">#定义类方法：查看服务状态</span></span><br><span class="line">        <span class="keyword">if</span> self.running:</span><br><span class="line">            print(<span class="string">&#x27;服务运行于%d端口上。&#x27;</span>%self.port)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&#x27;服务已停止&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    gs = GameServer(<span class="number">3721</span>)   <span class="comment">#类实例化</span></span><br><span class="line">    print(gs.port)  <span class="comment">#对象属性，服务端口</span></span><br><span class="line">    gs.status()     <span class="comment">#对象方法，查看服务状态</span></span><br><span class="line">    gs.start()      <span class="comment">#对象方法：启动服务</span></span><br><span class="line">    gs.status()</span><br><span class="line">    gs.stop()       <span class="comment">#对象方法：停止服务</span></span><br><span class="line">    gs.status()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;​    python有两个顶级的结构定义：函数和类。</summary>
    
    
    
    <category term="python" scheme="https://www.lauyongyi.cn/categories/python/"/>
    
    
    <category term="python" scheme="https://www.lauyongyi.cn/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Linux性能监控工具-Nmon</title>
    <link href="https://www.lauyongyi.cn/Linux%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7-Nmon.html"/>
    <id>https://www.lauyongyi.cn/Linux%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7-Nmon.html</id>
    <published>2020-12-29T06:00:00.000Z</published>
    <updated>2020-12-29T07:03:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>​    Nmon是一种在AIX与各种<strong>Linux</strong>操作系统上广泛使用的监控与分析工具，相对于其它一些系统资源监控工具来说，nmon所记录的信息是比较全面的，它能在系统运行过程中实时地捕捉系统资源的使用情况，并且能输出结果到文件中，然后通过nmon_analyzer工具产生数据文件与图形化结果。<a id="more"></a></p><p>nmon所记录的数据包含以下一些方面：</p><ul><li>cpu占用率　　</li><li>内存使用情况　　</li><li>磁盘I/O速度、传输和读写比率　　</li><li>文件系统的使用率　　</li><li>网络I/O速度、传输和读写比率、错误统计率与传输包的大小　　</li><li>消耗资源最多的进程　　</li><li>计算机详细信息和资源　　</li><li>页面空间和页面I/O速度　　</li><li>用户自定义的磁盘组　　</li><li>网络文件系统</li></ul><h4 id="下载安装nmon"><a href="#下载安装nmon" class="headerlink" title="下载安装nmon"></a>下载安装nmon</h4><p>1、下载安装包：<span class="exturl" data-url="aHR0cDovL25tb24uc291cmNlZm9yZ2UubmV0L3Btd2lraS5waHA/bj1TaXRlLkRvd25sb2Fk">http://nmon.sourceforge.net/pmwiki.php?n=Site.Download<i class="fa fa-external-link-alt"></i></span> 选择下载相应的版本，我下载的是 <a href="/papers/nmon16m_helpsystems.tar.gz">nmon16m_helpsystems.tar.gz</a>(截至目前最新的）。解压后里边有很多版本的nmon，我用的是nmon_x86_64_centos7，亲测可用。</p><p>2、直接在window中将解压好的nmon_x86_64_centos7通过sftp上传到要监控的linux系统中对应目录下</p><p>3、执行授权命令：# chmod +x  nmon_x86_64_centos7</p><p>4、运行./nmon_x86_64_centos7，便可进入nmon的监控界面，如下图：</p><p><img src="/images/2020/12/20201229141734.png"></p><h4 id="实时监控"><a href="#实时监控" class="headerlink" title="实时监控"></a>实时监控</h4><p>​    在完成配置后，只需要“./nmon_x86_64_centos7”命令即可运行程序，通过一些快捷键调取关心的系统资源指标进行显示，如按键“C”可以查看CPU相 关信息；按键“D”可以查看磁盘信息；按键“T”可以查看系统的进程信息；“M”对应内存、“N”对应网络等等，完整的快捷键对应内容可以通过帮助（按键 “H”）查看，可以显示Linux系统CPU、内存、进程信息，包括了CPU的用户、系统、等待和空闲状态值，可用内存、缓存大小以及进程的CPU消耗等详细指标。该种方式显示信息实时性强，能够及时掌握系统承受压力下的运行情况，每颗CPU利用率是多少、内存使用多少、网络流量多少、磁盘读写……这些数据均是实时刷新，一目了然。</p><p>例如：“c“查看系统CPU使用情况</p><p><img src="/images/2020/12/20201229142218.png"></p><h4 id="nmon数据采集"><a href="#nmon数据采集" class="headerlink" title="nmon数据采集"></a>nmon数据采集</h4><h5 id="数据采集"><a href="#数据采集" class="headerlink" title="数据采集"></a>数据采集</h5><p>为了实时监控系统在一段时间内的使用情况并将结果记录下来，可以通过运行以下命令实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># .&#x2F;nmon_x86_64_centos7 -f -t -s 30 -c 180 -m &#x2F;home</span><br></pre></td></tr></table></figure><p>-f：按标准格式输出文件：<hostname>_YYYYMMDD_HHMM.nmon；　　</p><p>-t：输出中包括占用率较高的进程；　　</p><p>-s 30：每30秒进行一次数据采集　　</p><p>-c 180：一共采集180次</p><p>-m 生成的数据文件的存放目录。</p><p>输入命令回车后，将在/home目录生成一个hostname_timeSeries.nmon的文件。</p><p>如果想停止该监控，需要通过<code>#ps –ef|grep nmon</code>查询进程号，然后杀掉该进程以停止监控。</p><h5 id="生成图形化结果"><a href="#生成图形化结果" class="headerlink" title="生成图形化结果"></a>生成图形化结果</h5><p>为了分析nmon监控获得的结果，IBM还提供了相应的图形化分析工具nmon_analyser，通过nmon analyser.xls工具可以把监控的结果文件转换成excel文件，方便分析系统的各项资源占用情况。下载<a href="/papers/nmon_analyzer_v61.zip">nmon_analyser</a>（生成性能报告的免费工具）</p><p>nmon analyser.xls工具的使用方法如下：　　</p><p>（1）打开nmonanalyser.xls工具；　　</p><p>（2）调整excel宏安全性(office 2016以上版本可以在文件–选项–信任中心–信任中心设置–宏设置–勾选启用所有宏)　　</p><p>（3）修改完后，确定-关闭nmon analyser.xls，重新打开；　　</p><p>（4）点击Analyse nmondata按钮，加载之前下载的 nmon 文件。</p><p>生成的图形化结果如下图所示：</p><p><img src="/images/2020/12/20201229145929.png"></p><h5 id="结束nmon运行"><a href="#结束nmon运行" class="headerlink" title="结束nmon运行"></a>结束nmon运行</h5><p>nmon运行本身是会消耗系统资源，如需关闭nmon，直接kill掉</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># ps -ef | grep nmon   (得到pid)</span><br><span class="line"></span><br><span class="line"># kill -9pid             (安全kill)</span><br></pre></td></tr></table></figure><h5 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h5><p>除配合性能测试的短期监控，我们也可以实现对系统的定期监控，作为运营维护阶段的参考。定期监控实现如下：1)  执行命令：#crontab -e</p><ol start="2"><li> 在最后一行添加如下命令：</li></ol><p>0 8 * * 1,2,3,4,5 /opt/nmon_x86_64_linux -f -N -m/nmon/log -s 30 -c 1200</p><p>**表示:**周一到周五，从早上08点开始，监控10个小时（到18:00整为止），输出到/nmon/log</p><h5 id="nmon关键指标列表"><a href="#nmon关键指标列表" class="headerlink" title="nmon关键指标列表"></a>nmon关键指标列表</h5><p><strong>系统汇总</strong>（对应excel标签的‘SYS_SUMM’）蓝线为cpu占有率变化情况；粉线为磁盘IO的变化情况；</p><p><strong>磁盘读写情况汇总</strong>（对应excel标签的‘DISK_SUMM’）蓝色为磁盘读的速率KB/sec紫色为磁盘写的速率KB/sec</p><p><strong>内存情况汇总</strong>（对应excel标签的‘MEM’）</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;​    Nmon是一种在AIX与各种&lt;strong&gt;Linux&lt;/strong&gt;操作系统上广泛使用的监控与分析工具，相对于其它一些系统资源监控工具来说，nmon所记录的信息是比较全面的，它能在系统运行过程中实时地捕捉系统资源的使用情况，并且能输出结果到文件中，然后通过nmon_analyzer工具产生数据文件与图形化结果。</summary>
    
    
    
    <category term="Linux" scheme="https://www.lauyongyi.cn/categories/Linux/"/>
    
    
    <category term="工具使用" scheme="https://www.lauyongyi.cn/tags/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用监控命令</title>
    <link href="https://www.lauyongyi.cn/Linux%E5%B8%B8%E7%94%A8%E7%9B%91%E6%8E%A7%E5%91%BD%E4%BB%A4.html"/>
    <id>https://www.lauyongyi.cn/Linux%E5%B8%B8%E7%94%A8%E7%9B%91%E6%8E%A7%E5%91%BD%E4%BB%A4.html</id>
    <published>2020-12-28T10:46:00.000Z</published>
    <updated>2020-12-29T05:46:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>​    记录Linux下常用的监控命令<a id="more"></a></p><h4 id="1、top-–Linux-系统进程监控"><a href="#1、top-–Linux-系统进程监控" class="headerlink" title="1、top –Linux 系统进程监控"></a>1、top –Linux 系统进程监控</h4><p>​    top 命令是性能监控程序，它可以在很多 Linux/Unix 版本下使用，并且它也是 Linux 系统管理员经常使用的监控系统性能的工具。Top 命令可以定期显示所有正在运行和实际运行并且更新到列表中，它显示出 CPU 的使用、内存的使用、交换内存、缓存大小、缓冲区大小、过程控制、用户和更多命令。它也会显示内存和 CPU 使用率过高的正在运行的进程。当我们对 Linux 系统需要去监控和采取正确的行动时，top 命令对于系统管理员是非常有用的。让我们看下 top 命令的实际操作。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">top</span><br><span class="line">top - 19:23:49 up 10 days,  4:37,  1 user,  load average: 0.37, 0.24, 0.13</span><br><span class="line">Tasks:  78 total,   2 running,  76 sleeping,   0 stopped,   0 zombie</span><br><span class="line"><span class="meta">%</span><span class="bash">Cpu(s):  0.7 us,  0.3 sy,  0.0 ni, 99.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span></span><br><span class="line">KiB Mem :  1882012 total,   108880 free,   569200 used,  1203932 buff/cache</span><br><span class="line">KiB Swap:        0 total,        0 free,        0 used.  1124836 avail Mem </span><br><span class="line"></span><br><span class="line">  PID USER      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND                                                                </span><br><span class="line"> 2848 root      20   0  162452  11300   1980 S  0.3  0.6  10:13.25 barad_agent                                                            </span><br><span class="line"> 2849 root      20   0  611544  13716   2248 S  0.3  0.7  44:27.48 barad_agent                                                            </span><br><span class="line"> 3548 root      20   0  935212  20344  10396 S  0.3  1.1   1:20.46 YDService                                                              </span><br><span class="line"> 3565 root      20   0  642092  12424  11060 S  0.3  0.7   0:26.83 YDEdr                                                                  </span><br><span class="line">23237 root      20   0 2636376 440476   7888 S  0.3 23.4  14:38.07 java                                                                   </span><br><span class="line">30663 root      20   0  160032   2180   1512 R  0.3  0.1   0:00.01 top                    </span><br></pre></td></tr></table></figure><h5 id="信息说明如下："><a href="#信息说明如下：" class="headerlink" title="信息说明如下："></a>信息说明如下：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">PID — 进程id</span><br><span class="line"></span><br><span class="line">USER — 进程所有者</span><br><span class="line"></span><br><span class="line">PR — 进程优先级</span><br><span class="line"></span><br><span class="line">NI — nice值。负值表示高优先级，正值表示低优先级</span><br><span class="line"></span><br><span class="line">VIRT — 进程使用的虚拟内存总量，单位kb。VIRT&#x3D;SWAP+RES</span><br><span class="line"></span><br><span class="line">RES — 进程使用的、未被换出的物理内存大小，单位kb。RES&#x3D;CODE+DATA</span><br><span class="line"></span><br><span class="line">SHR — 共享内存大小，单位kb</span><br><span class="line"></span><br><span class="line">S — 进程状态。D&#x3D;不可中断的睡眠状态 R&#x3D;运行 S&#x3D;睡眠 T&#x3D;跟踪&#x2F;停止 Z&#x3D;僵尸进程</span><br><span class="line"></span><br><span class="line">%CPU — 上次更新到现在的CPU时间占用百分比</span><br><span class="line"></span><br><span class="line">%MEM — 进程使用的物理内存百分比</span><br><span class="line"></span><br><span class="line">TIME+ — 进程使用的CPU时间总计，单位1&#x2F;100秒</span><br><span class="line"></span><br><span class="line">COMMAND — 进程名称（命令名&#x2F;命令行）</span><br></pre></td></tr></table></figure><h4 id="2、vmstat-–虚拟内存统计"><a href="#2、vmstat-–虚拟内存统计" class="headerlink" title="2、vmstat –虚拟内存统计"></a>2、vmstat –虚拟内存统计</h4><p>vmstat 命令是用于显示虚拟内存、内核线程、磁盘、系统进程、I/O 模块、中断、CPU 活跃状态等更多信息。在默认的情况下，Linux 系统是没有 vmstat 这个命令的，如果你要使用它，必须安装一个包名叫 sysstat 的程序包。</p><p>一般vmstat工具的使用是通过两个数字参数来完成的，第一个参数是采样的时间间隔数，单位是秒，第二个参数是采样的次数，如:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> vmstat 2 10</span></span><br><span class="line">procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----</span><br><span class="line"> r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st</span><br><span class="line"> 4  0      0 108484 134740 1069640    0    0     2    34   33   16  1  1 99  0  0</span><br><span class="line"> 0  0      0 109832 134740 1069648    0    0     0    36  589 1173  1  2 97  1  0</span><br><span class="line"> 0  0      0 111460 134740 1069652    0    0     0     6  857 1721  1  1 98  0  0</span><br><span class="line"> 0  0      0 111500 134740 1069660    0    0     0    48  752 1492  1  1 98  0  0</span><br><span class="line"> 0  0      0 111464 134740 1069668    0    0     0     0  196  375  1  1 98  0  0</span><br><span class="line"> 0  0      0 111516 134740 1069672    0    0     0    52  166  375  2  1 97  0  0</span><br></pre></td></tr></table></figure><p>2表示每个两秒采集一次服务器状态，10表示采集10次。</p><p>实际上，在应用过程中，会在一段时间内一直监控，不想监控直接结束vmstat就行了,例如:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> vmstat 2 </span></span><br><span class="line">procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----</span><br><span class="line"> r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st</span><br><span class="line"> 4  0      0 111268 134744 1069764    0    0     2    34   33   16  1  1 99  0  0</span><br><span class="line"> 0  0      0 111020 134744 1069764    0    0     0    30  188  380  1  1 99  1  0</span><br><span class="line"> 0  0      0 111004 134744 1069772    0    0     0     0  154  314  1  1 99  0  0</span><br><span class="line"> 0  0      0 107632 134744 1069772    0    0     0     0  195  350  2  1 97  0  0</span><br><span class="line"> 0  0      0 106712 134744 1069776    0    0     0    84  635 1276  2  2 96  1  0</span><br></pre></td></tr></table></figure><p>这表示vmstat每2秒采集数据，一直采集，直到结束程序，这里采集了5次数据就结束了程序。</p><h5 id="字段说明："><a href="#字段说明：" class="headerlink" title="字段说明："></a>字段说明：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">Procs（进程）：</span><br><span class="line"></span><br><span class="line">r: 运行队列中进程数量</span><br><span class="line"></span><br><span class="line">b: 等待IO的进程数量</span><br><span class="line"></span><br><span class="line">Memory（内存）：</span><br><span class="line"></span><br><span class="line">swpd: 使用虚拟内存大小</span><br><span class="line"></span><br><span class="line">free: 可用内存大小</span><br><span class="line"></span><br><span class="line">buff: 用作缓冲的内存大小</span><br><span class="line"></span><br><span class="line">cache: 用作缓存的内存大小</span><br><span class="line"></span><br><span class="line">Swap：</span><br><span class="line"></span><br><span class="line">si: 每秒从交换区写到内存的大小</span><br><span class="line"></span><br><span class="line">so: 每秒写入交换区的内存大小</span><br><span class="line"></span><br><span class="line">IO：（现在的Linux版本块的大小为1024bytes）</span><br><span class="line"></span><br><span class="line">bi: 每秒读取的块数</span><br><span class="line"></span><br><span class="line">bo: 每秒写入的块数</span><br><span class="line"></span><br><span class="line">系统：</span><br><span class="line"></span><br><span class="line">in: 每秒中断数，包括时钟中断。</span><br><span class="line"></span><br><span class="line">cs: 每秒上下文切换数。</span><br><span class="line"></span><br><span class="line">CPU（以百分比表示）：</span><br><span class="line"></span><br><span class="line">us: 用户进程执行时间(user time)</span><br><span class="line"></span><br><span class="line">sy: 系统进程执行时间(system time)</span><br><span class="line"></span><br><span class="line">id: 空闲时间(包括IO等待时间),中央处理器的空闲时间 。以百分比表示。</span><br><span class="line"></span><br><span class="line">wa: 等待IO时间</span><br></pre></td></tr></table></figure><p>备注： 如果 r经常大于 4 ，且id经常少于40，表示cpu的负荷很重。如果pi，po 长期不等于0，表示内存不足。如果disk 经常不等于0， 且在 b中的队列 大于3， 表示 io性能不好。Linux在具有高稳定性、可靠性的同时，具有很好的可伸缩性和扩展性，能够针对不同的应用和硬件环境调整，优化出满足当前应用需要的最佳性能。因此企业在维护Linux系统、进行系统调优时，了解系统性能分析工具是至关重要的。</p><h4 id="3、losf-–打开文件列表"><a href="#3、losf-–打开文件列表" class="headerlink" title="3、losf –打开文件列表"></a>3、losf –打开文件列表</h4><h4 id="4、netstat-–网络统计"><a href="#4、netstat-–网络统计" class="headerlink" title="4、netstat –网络统计"></a>4、netstat –网络统计</h4><p>​    参考另一篇笔记：<a href="https://www.lauyongyi.cn/Linux%E6%9F%A5%E7%9C%8B%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8.html#more">Linux查看端口占用</a></p><h4 id="5、tcpdump-–网络数据包分析器"><a href="#5、tcpdump-–网络数据包分析器" class="headerlink" title="5、tcpdump –网络数据包分析器"></a>5、tcpdump –网络数据包分析器</h4><p>​    tcpdump 是一种使用最广泛的命令行网络数据包分析器或数据包嗅探程序，主要用于捕获和过滤 TCP/IP 包收到或者转移在一个网络的特定借口信息。它也提供了一个选项参数去保存将捕获的包在一个文件中用于以后分析使用，tcpdump 几乎在所有的 Linux 版本中都是可用的。</p><h5 id="默认启动"><a href="#默认启动" class="headerlink" title="默认启动"></a>默认启动</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump</span><br></pre></td></tr></table></figure><p>普通情况下，直接启动tcpdump将监视第一个网络接口上所有流过的数据包。</p><h5 id="监视指定网络接口的数据包"><a href="#监视指定网络接口的数据包" class="headerlink" title="监视指定网络接口的数据包"></a>监视指定网络接口的数据包</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -i eth1</span><br></pre></td></tr></table></figure><h5 id="监视指定主机的数据包"><a href="#监视指定主机的数据包" class="headerlink" title="监视指定主机的数据包"></a>监视指定主机的数据包</h5><p>打印所有进入或离开sundown的数据包.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump host sundown</span><br></pre></td></tr></table></figure><p>也可以指定ip,例如截获所有192.168.10.1 的主机收到的和发出的所有的数据包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump host 192.168.10.1  </span><br></pre></td></tr></table></figure><p>打印helios 与 hot 或者与 ace 之间通信的数据包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump host helios and \( hot or ace \)</span><br></pre></td></tr></table></figure><p>截获主机192.168.10.1  和主机192.168.10.2  或192.168.10.3 的通信</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump host 192.168.10.1  and \ (192.168.10.2 or 192.168.10.3 \) </span><br></pre></td></tr></table></figure><p>打印ace与任何其他主机之间通信的IP 数据包, 但不包括与helios之间的数据包.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump ip host ace and not helios</span><br></pre></td></tr></table></figure><p>如果想要获取主机192.168.10.1除了和主机192.168.10.2之外所有主机通信的ip包，使用命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump ip host 192.168.10.1 and ! 192.168.10.2</span><br></pre></td></tr></table></figure><p>截获主机hostname发送的所有数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -i eth0 src host hostname</span><br></pre></td></tr></table></figure><p>监视所有送到主机hostname的数据包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -i eth0 dst host hostname</span><br></pre></td></tr></table></figure><h5 id="监视指定主机和端口的数据包"><a href="#监视指定主机和端口的数据包" class="headerlink" title="监视指定主机和端口的数据包"></a>监视指定主机和端口的数据包</h5><p>如果想要获取主机192.168.10.1接收或发出的telnet包，使用如下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump tcp port 23 and host 192.168.10.1</span><br></pre></td></tr></table></figure><p>对本机的udp 123 端口进行监视 123 为ntp的服务端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump udp port 123 </span><br></pre></td></tr></table></figure><h5 id="监视指定网络的数据包"><a href="#监视指定网络的数据包" class="headerlink" title="监视指定网络的数据包"></a>监视指定网络的数据包</h5><p>打印本地主机与Berkeley网络上的主机之间的所有通信数据包(nt: ucb-ether, 此处可理解为’Berkeley网络’的网络地址,此表达式最原始的含义可表达为: 打印网络地址为ucb-ether的所有数据包)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump net ucb-ether</span><br></pre></td></tr></table></figure><p>打印所有通过网关snup的ftp数据包(注意, 表达式被单引号括起来了, 这可以防止shell对其中的括号进行错误解析)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump &#39;gateway snup and (port ftp or ftp-data)&#39;</span><br></pre></td></tr></table></figure><p>打印所有源地址或目标地址是本地主机的IP数据包</p><p>(如果本地网络通过网关连到了另一网络, 则另一网络并不能算作本地网络.(nt: 此句翻译曲折,需补充).localnet 实际使用时要真正替换成本地网络的名字)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump ip and not net localnet</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;​    记录Linux下常用的监控命令</summary>
    
    
    
    <category term="Linux" scheme="https://www.lauyongyi.cn/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://www.lauyongyi.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux查看端口占用</title>
    <link href="https://www.lauyongyi.cn/Linux%E6%9F%A5%E7%9C%8B%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8.html"/>
    <id>https://www.lauyongyi.cn/Linux%E6%9F%A5%E7%9C%8B%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8.html</id>
    <published>2020-12-28T10:46:00.000Z</published>
    <updated>2020-12-28T09:09:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>​    Linux查看端口占用得情况可以使用<strong>lsof</strong>和<strong>netstat</strong> 命令<a id="more"></a></p><h4 id="lsof"><a href="#lsof" class="headerlink" title="lsof"></a>lsof</h4><p>​    <strong>lsof(list open files)</strong> 是一个列出当前系统打开文件的工具。</p><p>lsf查看端口占用语法格式：</p><p><code>lsof -i:端口号</code></p><h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># lsof -i:8080</span><br><span class="line">COMMAND   PID USER   FD   TYPE DEVICE SIZE&#x2F;OFF NODE NAME</span><br><span class="line">java    23237 root   57u  IPv6  56034      0t0  TCP *:webcache (LISTEN)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看出8080端口已经被 java 服务占用。</p><p>lsof -i  需要 root 用户的权限来执行，如下图：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># lsof -i</span><br><span class="line">COMMAND     PID USER   FD   TYPE   DEVICE SIZE&#x2F;OFF NODE NAME</span><br><span class="line">dhclient    859 root    6u  IPv4    14539      0t0  UDP *:bootpc </span><br><span class="line">sshd       1385 root    3u  IPv4    16540      0t0  TCP *:ssh (LISTEN)</span><br><span class="line">ntpd       2343  ntp   16u  IPv4    18157      0t0  UDP VM-0-12-centos:ntp </span><br><span class="line">ntpd       2343  ntp   17u  IPv4    18158      0t0  UDP VM-0-12-centos:ntp </span><br><span class="line">ntpd       2343  ntp   18u  IPv6    18159      0t0  UDP VM-0-12-centos:ntp </span><br><span class="line">ntpd       2343  ntp   19u  IPv6    18162      0t0  UDP VM-0-12-centos:ntp </span><br><span class="line">YDService  3548 root   18u  IPv4 15028196      0t0  TCP VM-0-12-centos:39406-&gt;169.254.0.55:lsi-bobcat (ESTABLISHED)</span><br><span class="line">sshd      17853 root    3u  IPv4 15450643      0t0  TCP VM-0-12-centos:ssh-&gt;119.123.73.14:13428 (ESTABLISHED)</span><br><span class="line">sshd      18401 root    3u  IPv4 15454393      0t0  TCP VM-0-12-centos:ssh-&gt;49.234.88.101:38420 (ESTABLISHED)</span><br><span class="line">sshd      18404 sshd    3u  IPv4 15454393      0t0  TCP VM-0-12-centos:ssh-&gt;49.234.88.101:38420 (ESTABLISHED)</span><br><span class="line">sshd      18413 root    3u  IPv4 15454481      0t0  TCP VM-0-12-centos:ssh-&gt;167.71.127.147:42390 (ESTABLISHED)</span><br><span class="line">sshd      18416 sshd    3u  IPv4 15454481      0t0  TCP VM-0-12-centos:ssh-&gt;167.71.127.147:42390 (ESTABLISHED)</span><br><span class="line">java      23237 root   57u  IPv6    56034      0t0  TCP *:webcache (LISTEN)</span><br><span class="line">java      23237 root  196u  IPv6    56093      0t0  TCP VM-0-12-centos:mxi (LISTEN)</span><br></pre></td></tr></table></figure><h5 id="lsof输出各列信息的意义如下："><a href="#lsof输出各列信息的意义如下：" class="headerlink" title="lsof输出各列信息的意义如下："></a>lsof输出各列信息的意义如下：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line">COMMAND：进程的名称</span><br><span class="line"></span><br><span class="line">PID：进程标识符</span><br><span class="line"></span><br><span class="line">PPID：父进程标识符（需要指定-R参数）</span><br><span class="line"></span><br><span class="line">USER：进程所有者</span><br><span class="line"></span><br><span class="line">PGID：进程所属组</span><br><span class="line"></span><br><span class="line">FD：文件描述符，应用程序通过文件描述符识别该文件。如cwd、txt等</span><br><span class="line"></span><br><span class="line">（1）cwd：表示current work dirctory，即：应用程序的当前工作目录，这是该应用程序启动的目录，除非它本身对这个目录进行更改</span><br><span class="line"></span><br><span class="line">（2）txt ：该类型的文件是程序代码，如应用程序二进制文件本身或共享库，如上列表中显示的 &#x2F;sbin&#x2F;init 程序</span><br><span class="line"></span><br><span class="line">（3）lnn：library references (AIX);</span><br><span class="line"></span><br><span class="line">（4）er：FD information error (see NAME column);</span><br><span class="line"></span><br><span class="line">（5）jld：jail directory (FreeBSD);</span><br><span class="line"></span><br><span class="line">（6）ltx：shared library text (code and data);</span><br><span class="line"></span><br><span class="line">（7）mxx ：hex memory-mapped type number xx.</span><br><span class="line"></span><br><span class="line">（8）m86：DOS Merge mapped file;</span><br><span class="line"></span><br><span class="line">（9）mem：memory-mapped file;</span><br><span class="line"></span><br><span class="line">（10）mmap：memory-mapped device;</span><br><span class="line"></span><br><span class="line">（11）pd：parent directory;</span><br><span class="line"></span><br><span class="line">（12）rtd：root directory;</span><br><span class="line"></span><br><span class="line">（13）tr：kernel trace file (OpenBSD);</span><br><span class="line"></span><br><span class="line">（14）v86  VP&#x2F;ix mapped file;</span><br><span class="line"></span><br><span class="line">（15）0：表示标准输出</span><br><span class="line"></span><br><span class="line">（16）1：表示标准输入</span><br><span class="line"></span><br><span class="line">（17）2：表示标准错误</span><br><span class="line"></span><br><span class="line">一般在标准输出、标准错误、标准输入后还跟着文件状态模式：r、w、u等</span><br><span class="line"></span><br><span class="line">（1）u：表示该文件被打开并处于读取&#x2F;写入模式</span><br><span class="line"></span><br><span class="line">（2）r：表示该文件被打开并处于只读模式</span><br><span class="line"></span><br><span class="line">（3）w：表示该文件被打开并处于</span><br><span class="line"></span><br><span class="line">（4）空格：表示该文件的状态模式为unknow，且没有锁定</span><br><span class="line"></span><br><span class="line">（5）-：表示该文件的状态模式为unknow，且被锁定</span><br><span class="line"></span><br><span class="line">同时在文件状态模式后面，还跟着相关的锁</span><br><span class="line"></span><br><span class="line">（1）N：for a Solaris NFS lock of unknown type;</span><br><span class="line"></span><br><span class="line">（2）r：for read lock on part of the file;</span><br><span class="line"></span><br><span class="line">（3）R：for a read lock on the entire file;</span><br><span class="line"></span><br><span class="line">（4）w：for a write lock on part of the file;（文件的部分写锁）</span><br><span class="line"></span><br><span class="line">（5）W：for a write lock on the entire file;（整个文件的写锁）</span><br><span class="line"></span><br><span class="line">（6）u：for a read and write lock of any length;</span><br><span class="line"></span><br><span class="line">（7）U：for a lock of unknown type;</span><br><span class="line"></span><br><span class="line">（8）x：for an SCO OpenServer Xenix lock on part      of the file;</span><br><span class="line"></span><br><span class="line">（9）X：for an SCO OpenServer Xenix lock on the      entire file;</span><br><span class="line"></span><br><span class="line">（10）space：if there is no lock.</span><br><span class="line"></span><br><span class="line">TYPE：文件类型，如DIR、REG等，常见的文件类型</span><br><span class="line"></span><br><span class="line">（1）DIR：表示目录</span><br><span class="line"></span><br><span class="line">（2）CHR：表示字符类型</span><br><span class="line"></span><br><span class="line">（3）BLK：块设备类型</span><br><span class="line"></span><br><span class="line">（4）UNIX： UNIX 域套接字</span><br><span class="line"></span><br><span class="line">（5）FIFO：先进先出 (FIFO) 队列</span><br><span class="line"></span><br><span class="line">（6）IPv4：网际协议 (IP) 套接字</span><br><span class="line"></span><br><span class="line">DEVICE：指定磁盘的名称</span><br><span class="line"></span><br><span class="line">SIZE：文件的大小</span><br><span class="line"></span><br><span class="line">NODE：索引节点（文件在磁盘上的标识）</span><br><span class="line"></span><br><span class="line">NAME：打开文件的确切名称</span><br></pre></td></tr></table></figure><h5 id="更多-lsof-的命令如下"><a href="#更多-lsof-的命令如下" class="headerlink" title="更多 lsof 的命令如下"></a>更多 lsof 的命令如下</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">lsof -i:8080：查看8080端口占用</span><br><span class="line">lsof abc.txt：显示开启文件abc.txt的进程</span><br><span class="line">lsof -c abc：显示abc进程现在打开的文件</span><br><span class="line">lsof -c -p 1234：列出进程号为1234的进程所打开的文件</span><br><span class="line">lsof -g gid：显示归属gid的进程情况</span><br><span class="line">lsof +d &#x2F;usr&#x2F;local&#x2F;：显示目录下被进程开启的文件</span><br><span class="line">lsof +D &#x2F;usr&#x2F;local&#x2F;：同上，但是会搜索目录下的目录，时间较长</span><br><span class="line">lsof -d 4：显示使用fd为4的进程</span><br><span class="line">lsof -i -U：显示所有打开的端口和UNIX domain文件</span><br></pre></td></tr></table></figure><h4 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h4><p>​    <code>netstat -tunlp</code> 用于显示tcp，udp 的端口和进程相关情况。</p><p>netstat 查看端口占用语法格式:</p><p> <code>netstat - tunlp | grep 端口号 </code></p><ul><li>-t (tcp) 仅显示tcp相关选项</li><li>-u (udp)仅显示udp相关选项</li><li>-n 拒绝显示别名，能显示数字的全部转化为数字</li><li>-l 仅列出在Listen(监听)的服务状态</li><li>-p 显示建立相关链接的程序名</li></ul><p>例如查看 8080 端口的情况，使用以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># netstat -tunlp | grep 8080</span><br><span class="line">tcp6       0      0 :::8080                 :::*                    LISTEN      23237&#x2F;java   </span><br></pre></td></tr></table></figure><h5 id="状态说明："><a href="#状态说明：" class="headerlink" title="状态说明："></a>状态说明：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">LISTEN：侦听来自远方的TCP端口的连接请求</span><br><span class="line"></span><br><span class="line">SYN-SENT：再发送连接请求后等待匹配的连接请求（如果有大量这样的状态包，检查是否中招了）</span><br><span class="line"></span><br><span class="line">SYN-RECEIVED：再收到和发送一个连接请求后等待对方对连接请求的确认（如有大量此状态，估计被flood攻击了）</span><br><span class="line"></span><br><span class="line">ESTABLISHED：代表一个打开的连接</span><br><span class="line"></span><br><span class="line">FIN-WAIT-1：等待远程TCP连接中断请求，或先前的连接中断请求的确认</span><br><span class="line"></span><br><span class="line">FIN-WAIT-2：从远程TCP等待连接中断请求</span><br><span class="line"></span><br><span class="line">CLOSE-WAIT：等待从本地用户发来的连接中断请求</span><br><span class="line"></span><br><span class="line">CLOSING：等待远程TCP对连接中断的确认</span><br><span class="line"></span><br><span class="line">LAST-ACK：等待原来的发向远程TCP的连接中断请求的确认（不是什么好东西，此项出现，检查是否被攻击）</span><br><span class="line"></span><br><span class="line">TIME-WAIT：等待足够的时间以确保远程TCP接收到连接中断请求的确认</span><br><span class="line"></span><br><span class="line">CLOSED：没有任何连接状态</span><br></pre></td></tr></table></figure><p>更多命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">netstat -ntlp &#x2F;&#x2F;查看当前所有tcp端口</span><br><span class="line">netstat -ntulp | grep 80 &#x2F;&#x2F;查看所有80端口使用情况</span><br></pre></td></tr></table></figure><h4 id="kill"><a href="#kill" class="headerlink" title="kill"></a>kill</h4><p>​    在查到端口占用的进程后，如果要杀掉对应的进程，可以使用kill命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill [-s &lt;信息名称或编号&gt;][程序]　或　kill [-l &lt;信息编号&gt;]</span><br></pre></td></tr></table></figure><p><strong>参数说明</strong>：</p><ul><li><p>-l &lt;信息编号&gt; 　若不加&lt;信息编号&gt;选项，则 -l 参数会列出全部的信息名称。</p></li><li><p>-s &lt;信息名称或编号&gt; 　指定要送出的信息。</p></li><li><p>[程序] 　[程序]可以是程序的PID或是PGID，也可以是工作编号。</p></li></ul><p>使用 kill -l 命令列出所有可用信号。<br>最常用的信号是：</p><ul><li>1 (HUP)：重新加载进程。</li><li>9 (KILL)：杀死一个进程。</li><li>15 (TERM)：正常停止一个进程。</li></ul><p>如上实例，我们看到 8000 端口对应的 PID 为 26993，使用以下命令杀死进程：</p><p><code>kill -9  23237</code></p><p>显示信号：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># kill -l</span><br><span class="line"> 1) SIGHUP 2) SIGINT 3) SIGQUIT 4) SIGILL 5) SIGTRAP</span><br><span class="line"> 6) SIGABRT 7) SIGBUS 8) SIGFPE 9) SIGKILL10) SIGUSR1</span><br><span class="line">11) SIGSEGV12) SIGUSR213) SIGPIPE14) SIGALRM15) SIGTERM</span><br><span class="line">16) SIGSTKFLT17) SIGCHLD18) SIGCONT19) SIGSTOP20) SIGTSTP</span><br><span class="line">21) SIGTTIN22) SIGTTOU23) SIGURG24) SIGXCPU25) SIGXFSZ</span><br><span class="line">26) SIGVTALRM27) SIGPROF28) SIGWINCH29) SIGIO30) SIGPWR</span><br><span class="line">31) SIGSYS34) SIGRTMIN35) SIGRTMIN+136) SIGRTMIN+237) SIGRTMIN+3</span><br><span class="line">38) SIGRTMIN+439) SIGRTMIN+540) SIGRTMIN+641) SIGRTMIN+742) SIGRTMIN+8</span><br><span class="line">43) SIGRTMIN+944) SIGRTMIN+1045) SIGRTMIN+1146) SIGRTMIN+1247) SIGRTMIN+13</span><br><span class="line">48) SIGRTMIN+1449) SIGRTMIN+1550) SIGRTMAX-1451) SIGRTMAX-1352) SIGRTMAX-12</span><br><span class="line">53) SIGRTMAX-1154) SIGRTMAX-1055) SIGRTMAX-956) SIGRTMAX-857) SIGRTMAX-7</span><br><span class="line">58) SIGRTMAX-659) SIGRTMAX-560) SIGRTMAX-461) SIGRTMAX-362) SIGRTMAX-2</span><br><span class="line">63) SIGRTMAX-164) SIGRTMAX</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;​    Linux查看端口占用得情况可以使用&lt;strong&gt;lsof&lt;/strong&gt;和&lt;strong&gt;netstat&lt;/strong&gt; 命令</summary>
    
    
    
    <category term="Linux" scheme="https://www.lauyongyi.cn/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://www.lauyongyi.cn/tags/Linux/"/>
    
  </entry>
  
</feed>
